/* tslint:disable */
/* eslint-disable */
/*
Catalog API

This API lists data sets available on Agrimetrics platform.

The version of the OpenAPI document: 


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ManageLayerAddGeoTiffRequest } from '../models';
// @ts-ignore
import { ManageLayerAddGeoTiffResponse } from '../models';
// @ts-ignore
import { ManageLayerIngestFileRequest } from '../models';
// @ts-ignore
import { ManageLayerSetStyleRequest } from '../models';
// @ts-ignore
import { RestError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ManageLayerApi - axios parameter creator
 * @export
 */
export const ManageLayerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * > :warning: **The maximum file size accepted for this endpoint to work is 200 MiB.**  This endpoint will add a GeoTIFF to an existing GeoTIFF layer. 
         * @summary Add a GeoTIFF to a layer
         * @param {string} layerId 
         * @param {ManageLayerAddGeoTiffRequest} manageLayerAddGeoTiffRequest 
         * @param {string} [datetime] 
         * @param {Uint8Array | File | buffer.File} [file] The file to upload.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGeoTiff: async (layerId: string, manageLayerAddGeoTiffRequest: ManageLayerAddGeoTiffRequest, datetime?: string, file?: Uint8Array | File | buffer.File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerId' is not null or undefined
            assertParamExists('addGeoTiff', 'layerId', layerId)
            // verify required parameter 'manageLayerAddGeoTiffRequest' is not null or undefined
            assertParamExists('addGeoTiff', 'manageLayerAddGeoTiffRequest', manageLayerAddGeoTiffRequest)
            const localVarPath = `/layers/{layerId}`
                .replace(`{${"layerId"}}`, encodeURIComponent(String(layerId !== undefined ? layerId : `-layerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (datetime !== undefined) {
                await addFormParam('datetime', datetime, false, true)
            }
    
            if (file !== undefined) {
                await addFormParam('file', file, true, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: manageLayerAddGeoTiffRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/layers/{layerId}',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate a new style and apply it to the given layer. 
         * @summary Auto-generate and set layer style
         * @param {string} layerId 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoGenerateStyle: async (layerId: string, key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerId' is not null or undefined
            assertParamExists('autoGenerateStyle', 'layerId', layerId)
            // verify required parameter 'key' is not null or undefined
            assertParamExists('autoGenerateStyle', 'key', key)
            const localVarPath = `/layers/{layerId}/style`
                .replace(`{${"layerId"}}`, encodeURIComponent(String(layerId !== undefined ? layerId : `-layerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/layers/{layerId}/style',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Delete the datastore and layer relating to a zip file on a data set. 
         * @summary Delete layer
         * @param {string} layerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLayer: async (layerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerId' is not null or undefined
            assertParamExists('deleteLayer', 'layerId', layerId)
            const localVarPath = `/layers/{layerId}`
                .replace(`{${"layerId"}}`, encodeURIComponent(String(layerId !== undefined ? layerId : `-layerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/layers/{layerId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the SLD style that has been applied to a layer. 
         * @summary Get the style for a layer, if one has been set
         * @param {string} layerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyle: async (layerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerId' is not null or undefined
            assertParamExists('getStyle', 'layerId', layerId)
            const localVarPath = `/layers/{layerId}/style`
                .replace(`{${"layerId"}}`, encodeURIComponent(String(layerId !== undefined ? layerId : `-layerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/layers/{layerId}/style',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Ingest a file that has been uploaded to a data set. 
         * @summary Ingest a file to a layer
         * @param {string} layerId 
         * @param {ManageLayerIngestFileRequest} manageLayerIngestFileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ingestFile: async (layerId: string, manageLayerIngestFileRequest: ManageLayerIngestFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerId' is not null or undefined
            assertParamExists('ingestFile', 'layerId', layerId)
            // verify required parameter 'manageLayerIngestFileRequest' is not null or undefined
            assertParamExists('ingestFile', 'manageLayerIngestFileRequest', manageLayerIngestFileRequest)
            const localVarPath = `/layers/{layerId}/ingest`
                .replace(`{${"layerId"}}`, encodeURIComponent(String(layerId !== undefined ? layerId : `-layerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: manageLayerIngestFileRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/layers/{layerId}/ingest',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(manageLayerIngestFileRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Remove a file from a layer. When you are deleting a file from a layer, the layer may remain if any other files were ingested onto the same layer. If removing a raster file, provide the fileName query parameter; if removing a vector file, provide the fileUri. 
         * @summary Delete a file from a layer
         * @param {string} layerId 
         * @param {string} [fileUri] 
         * @param {string} [filename] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFile: async (layerId: string, fileUri?: string, filename?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerId' is not null or undefined
            assertParamExists('removeFile', 'layerId', layerId)
            const localVarPath = `/layers/{layerId}/files`
                .replace(`{${"layerId"}}`, encodeURIComponent(String(layerId !== undefined ? layerId : `-layerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (fileUri !== undefined) {
                localVarQueryParameter['fileUri'] = fileUri;
            }

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/layers/{layerId}/files',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an SLD style that has been applied to a layer. 
         * @summary Delete the style from a layer, if one has been set
         * @param {string} layerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeStyle: async (layerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerId' is not null or undefined
            assertParamExists('removeStyle', 'layerId', layerId)
            const localVarPath = `/layers/{layerId}/style`
                .replace(`{${"layerId"}}`, encodeURIComponent(String(layerId !== undefined ? layerId : `-layerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/layers/{layerId}/style',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Apply a new style to the given layer. The style must be provided as an SLD file (1.0.0 and 1.1.0 supported). 
         * @summary Set layer style
         * @param {string} layerId 
         * @param {ManageLayerSetStyleRequest} manageLayerSetStyleRequest 
         * @param {Uint8Array | File | buffer.File} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStyle: async (layerId: string, manageLayerSetStyleRequest: ManageLayerSetStyleRequest, file?: Uint8Array | File | buffer.File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerId' is not null or undefined
            assertParamExists('setStyle', 'layerId', layerId)
            // verify required parameter 'manageLayerSetStyleRequest' is not null or undefined
            assertParamExists('setStyle', 'manageLayerSetStyleRequest', manageLayerSetStyleRequest)
            const localVarPath = `/layers/{layerId}/style`
                .replace(`{${"layerId"}}`, encodeURIComponent(String(layerId !== undefined ? layerId : `-layerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (file !== undefined) {
                await addFormParam('file', file, true, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: manageLayerSetStyleRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/layers/{layerId}/style',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ManageLayerApi - functional programming interface
 * @export
 */
export const ManageLayerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ManageLayerApiAxiosParamCreator(configuration)
    return {
        /**
         * > :warning: **The maximum file size accepted for this endpoint to work is 200 MiB.**  This endpoint will add a GeoTIFF to an existing GeoTIFF layer. 
         * @summary Add a GeoTIFF to a layer
         * @param {ManageLayerApiAddGeoTiffRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addGeoTiff(requestParameters: ManageLayerApiAddGeoTiffRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManageLayerAddGeoTiffResponse>> {
            const manageLayerAddGeoTiffRequest: ManageLayerAddGeoTiffRequest = {
                datetime: requestParameters.datetime,
                file: requestParameters.file
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addGeoTiff(requestParameters.layerId, manageLayerAddGeoTiffRequest, requestParameters.datetime, requestParameters.file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generate a new style and apply it to the given layer. 
         * @summary Auto-generate and set layer style
         * @param {ManageLayerApiAutoGenerateStyleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async autoGenerateStyle(requestParameters: ManageLayerApiAutoGenerateStyleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestError>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.autoGenerateStyle(requestParameters.layerId, requestParameters.key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Delete the datastore and layer relating to a zip file on a data set. 
         * @summary Delete layer
         * @param {ManageLayerApiDeleteLayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLayer(requestParameters: ManageLayerApiDeleteLayerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLayer(requestParameters.layerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the SLD style that has been applied to a layer. 
         * @summary Get the style for a layer, if one has been set
         * @param {ManageLayerApiGetStyleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStyle(requestParameters: ManageLayerApiGetStyleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStyle(requestParameters.layerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Ingest a file that has been uploaded to a data set. 
         * @summary Ingest a file to a layer
         * @param {ManageLayerApiIngestFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ingestFile(requestParameters: ManageLayerApiIngestFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const manageLayerIngestFileRequest: ManageLayerIngestFileRequest = {
                fileId: requestParameters.fileId,
                fileName: requestParameters.fileName,
                datetime: requestParameters.datetime
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.ingestFile(requestParameters.layerId, manageLayerIngestFileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Remove a file from a layer. When you are deleting a file from a layer, the layer may remain if any other files were ingested onto the same layer. If removing a raster file, provide the fileName query parameter; if removing a vector file, provide the fileUri. 
         * @summary Delete a file from a layer
         * @param {ManageLayerApiRemoveFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFile(requestParameters: ManageLayerApiRemoveFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFile(requestParameters.layerId, requestParameters.fileUri, requestParameters.filename, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an SLD style that has been applied to a layer. 
         * @summary Delete the style from a layer, if one has been set
         * @param {ManageLayerApiRemoveStyleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeStyle(requestParameters: ManageLayerApiRemoveStyleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeStyle(requestParameters.layerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Apply a new style to the given layer. The style must be provided as an SLD file (1.0.0 and 1.1.0 supported). 
         * @summary Set layer style
         * @param {ManageLayerApiSetStyleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setStyle(requestParameters: ManageLayerApiSetStyleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const manageLayerSetStyleRequest: ManageLayerSetStyleRequest = {
                file: requestParameters.file
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setStyle(requestParameters.layerId, manageLayerSetStyleRequest, requestParameters.file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ManageLayerApi - factory interface
 * @export
 */
export const ManageLayerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ManageLayerApiFp(configuration)
    return {
        /**
         * > :warning: **The maximum file size accepted for this endpoint to work is 200 MiB.**  This endpoint will add a GeoTIFF to an existing GeoTIFF layer. 
         * @summary Add a GeoTIFF to a layer
         * @param {ManageLayerApiAddGeoTiffRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addGeoTiff(requestParameters: ManageLayerApiAddGeoTiffRequest, options?: AxiosRequestConfig): AxiosPromise<ManageLayerAddGeoTiffResponse> {
            return localVarFp.addGeoTiff(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate a new style and apply it to the given layer. 
         * @summary Auto-generate and set layer style
         * @param {ManageLayerApiAutoGenerateStyleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoGenerateStyle(requestParameters: ManageLayerApiAutoGenerateStyleRequest, options?: AxiosRequestConfig): AxiosPromise<RestError> {
            return localVarFp.autoGenerateStyle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Delete the datastore and layer relating to a zip file on a data set. 
         * @summary Delete layer
         * @param {ManageLayerApiDeleteLayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLayer(requestParameters: ManageLayerApiDeleteLayerRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteLayer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the SLD style that has been applied to a layer. 
         * @summary Get the style for a layer, if one has been set
         * @param {ManageLayerApiGetStyleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyle(requestParameters: ManageLayerApiGetStyleRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getStyle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Ingest a file that has been uploaded to a data set. 
         * @summary Ingest a file to a layer
         * @param {ManageLayerApiIngestFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ingestFile(requestParameters: ManageLayerApiIngestFileRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ingestFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Remove a file from a layer. When you are deleting a file from a layer, the layer may remain if any other files were ingested onto the same layer. If removing a raster file, provide the fileName query parameter; if removing a vector file, provide the fileUri. 
         * @summary Delete a file from a layer
         * @param {ManageLayerApiRemoveFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFile(requestParameters: ManageLayerApiRemoveFileRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an SLD style that has been applied to a layer. 
         * @summary Delete the style from a layer, if one has been set
         * @param {ManageLayerApiRemoveStyleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeStyle(requestParameters: ManageLayerApiRemoveStyleRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeStyle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Apply a new style to the given layer. The style must be provided as an SLD file (1.0.0 and 1.1.0 supported). 
         * @summary Set layer style
         * @param {ManageLayerApiSetStyleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStyle(requestParameters: ManageLayerApiSetStyleRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.setStyle(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addGeoTiff operation in ManageLayerApi.
 * @export
 * @interface ManageLayerApiAddGeoTiffRequest
 */
export type ManageLayerApiAddGeoTiffRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ManageLayerApiAddGeoTiff
    */
    readonly layerId: string
    
    /**
    * 
    * @type {string}
    * @memberof ManageLayerApiAddGeoTiff
    */
    readonly datetime?: string
    
    /**
    * The file to upload.
    * @type {Uint8Array | File | buffer.File}
    * @memberof ManageLayerApiAddGeoTiff
    */
    readonly file?: Uint8Array | File | buffer.File
    
} & ManageLayerAddGeoTiffRequest

/**
 * Request parameters for autoGenerateStyle operation in ManageLayerApi.
 * @export
 * @interface ManageLayerApiAutoGenerateStyleRequest
 */
export type ManageLayerApiAutoGenerateStyleRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ManageLayerApiAutoGenerateStyle
    */
    readonly layerId: string
    
    /**
    * 
    * @type {string}
    * @memberof ManageLayerApiAutoGenerateStyle
    */
    readonly key: string
    
}

/**
 * Request parameters for deleteLayer operation in ManageLayerApi.
 * @export
 * @interface ManageLayerApiDeleteLayerRequest
 */
export type ManageLayerApiDeleteLayerRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ManageLayerApiDeleteLayer
    */
    readonly layerId: string
    
}

/**
 * Request parameters for getStyle operation in ManageLayerApi.
 * @export
 * @interface ManageLayerApiGetStyleRequest
 */
export type ManageLayerApiGetStyleRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ManageLayerApiGetStyle
    */
    readonly layerId: string
    
}

/**
 * Request parameters for ingestFile operation in ManageLayerApi.
 * @export
 * @interface ManageLayerApiIngestFileRequest
 */
export type ManageLayerApiIngestFileRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ManageLayerApiIngestFile
    */
    readonly layerId: string
    
} & ManageLayerIngestFileRequest

/**
 * Request parameters for removeFile operation in ManageLayerApi.
 * @export
 * @interface ManageLayerApiRemoveFileRequest
 */
export type ManageLayerApiRemoveFileRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ManageLayerApiRemoveFile
    */
    readonly layerId: string
    
    /**
    * 
    * @type {string}
    * @memberof ManageLayerApiRemoveFile
    */
    readonly fileUri?: string
    
    /**
    * 
    * @type {string}
    * @memberof ManageLayerApiRemoveFile
    */
    readonly filename?: string
    
}

/**
 * Request parameters for removeStyle operation in ManageLayerApi.
 * @export
 * @interface ManageLayerApiRemoveStyleRequest
 */
export type ManageLayerApiRemoveStyleRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ManageLayerApiRemoveStyle
    */
    readonly layerId: string
    
}

/**
 * Request parameters for setStyle operation in ManageLayerApi.
 * @export
 * @interface ManageLayerApiSetStyleRequest
 */
export type ManageLayerApiSetStyleRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ManageLayerApiSetStyle
    */
    readonly layerId: string
    
    /**
    * 
    * @type {Uint8Array | File | buffer.File}
    * @memberof ManageLayerApiSetStyle
    */
    readonly file?: Uint8Array | File | buffer.File
    
} & ManageLayerSetStyleRequest

/**
 * ManageLayerApiGenerated - object-oriented interface
 * @export
 * @class ManageLayerApiGenerated
 * @extends {BaseAPI}
 */
export class ManageLayerApiGenerated extends BaseAPI {
    /**
     * > :warning: **The maximum file size accepted for this endpoint to work is 200 MiB.**  This endpoint will add a GeoTIFF to an existing GeoTIFF layer. 
     * @summary Add a GeoTIFF to a layer
     * @param {ManageLayerApiAddGeoTiffRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageLayerApiGenerated
     */
    public addGeoTiff(requestParameters: ManageLayerApiAddGeoTiffRequest, options?: AxiosRequestConfig) {
        return ManageLayerApiFp(this.configuration).addGeoTiff(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate a new style and apply it to the given layer. 
     * @summary Auto-generate and set layer style
     * @param {ManageLayerApiAutoGenerateStyleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageLayerApiGenerated
     */
    public autoGenerateStyle(requestParameters: ManageLayerApiAutoGenerateStyleRequest, options?: AxiosRequestConfig) {
        return ManageLayerApiFp(this.configuration).autoGenerateStyle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Delete the datastore and layer relating to a zip file on a data set. 
     * @summary Delete layer
     * @param {ManageLayerApiDeleteLayerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageLayerApiGenerated
     */
    public deleteLayer(requestParameters: ManageLayerApiDeleteLayerRequest, options?: AxiosRequestConfig) {
        return ManageLayerApiFp(this.configuration).deleteLayer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the SLD style that has been applied to a layer. 
     * @summary Get the style for a layer, if one has been set
     * @param {ManageLayerApiGetStyleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageLayerApiGenerated
     */
    public getStyle(requestParameters: ManageLayerApiGetStyleRequest, options?: AxiosRequestConfig) {
        return ManageLayerApiFp(this.configuration).getStyle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Ingest a file that has been uploaded to a data set. 
     * @summary Ingest a file to a layer
     * @param {ManageLayerApiIngestFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageLayerApiGenerated
     */
    public ingestFile(requestParameters: ManageLayerApiIngestFileRequest, options?: AxiosRequestConfig) {
        return ManageLayerApiFp(this.configuration).ingestFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Remove a file from a layer. When you are deleting a file from a layer, the layer may remain if any other files were ingested onto the same layer. If removing a raster file, provide the fileName query parameter; if removing a vector file, provide the fileUri. 
     * @summary Delete a file from a layer
     * @param {ManageLayerApiRemoveFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageLayerApiGenerated
     */
    public removeFile(requestParameters: ManageLayerApiRemoveFileRequest, options?: AxiosRequestConfig) {
        return ManageLayerApiFp(this.configuration).removeFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an SLD style that has been applied to a layer. 
     * @summary Delete the style from a layer, if one has been set
     * @param {ManageLayerApiRemoveStyleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageLayerApiGenerated
     */
    public removeStyle(requestParameters: ManageLayerApiRemoveStyleRequest, options?: AxiosRequestConfig) {
        return ManageLayerApiFp(this.configuration).removeStyle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Apply a new style to the given layer. The style must be provided as an SLD file (1.0.0 and 1.1.0 supported). 
     * @summary Set layer style
     * @param {ManageLayerApiSetStyleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageLayerApiGenerated
     */
    public setStyle(requestParameters: ManageLayerApiSetStyleRequest, options?: AxiosRequestConfig) {
        return ManageLayerApiFp(this.configuration).setStyle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
