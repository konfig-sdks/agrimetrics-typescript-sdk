/* tslint:disable */
/* eslint-disable */
/*
Catalog API

This API lists data sets available on Agrimetrics platform.

The version of the OpenAPI document: 


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccrualPeriodicity } from '../models';
// @ts-ignore
import { BasicDataSetInfo } from '../models';
// @ts-ignore
import { BatchIdentityInputEntitlementsInner } from '../models';
// @ts-ignore
import { Category } from '../models';
// @ts-ignore
import { CategoryValue } from '../models';
// @ts-ignore
import { Contact } from '../models';
// @ts-ignore
import { DataFormat } from '../models';
// @ts-ignore
import { DataSet } from '../models';
// @ts-ignore
import { DataSetDataSet } from '../models';
// @ts-ignore
import { DataSetDerivedFromInner } from '../models';
// @ts-ignore
import { DataSetDistributionsInner } from '../models';
// @ts-ignore
import { DataSetListAllDataSetsPublishedStatusParameterInner } from '../models';
// @ts-ignore
import { DataSetPatch } from '../models';
// @ts-ignore
import { DataSetPatchGeospatialExtent } from '../models';
// @ts-ignore
import { DataSetPatchLicence } from '../models';
// @ts-ignore
import { DataSetPatchMetadataContact } from '../models';
// @ts-ignore
import { DataSetPatchTemporalExtent } from '../models';
// @ts-ignore
import { DataSetSampleData } from '../models';
// @ts-ignore
import { DataSetServicesInner } from '../models';
// @ts-ignore
import { DataSets } from '../models';
// @ts-ignore
import { DatasetCreateFileDatasetResponse } from '../models';
// @ts-ignore
import { DatasetCreateSingleCatalogEntryRequest } from '../models';
// @ts-ignore
import { DatasetDeleteSingleDataSetResponse } from '../models';
// @ts-ignore
import { DatasetGetEntitlementsResponse } from '../models';
// @ts-ignore
import { DatasetGetFileDatasetIdResponse } from '../models';
// @ts-ignore
import { DatasetGetValidationReport200Response } from '../models';
// @ts-ignore
import { DatasetGetValidationReportResponse } from '../models';
// @ts-ignore
import { DatasetListValidTagsResponse } from '../models';
// @ts-ignore
import { DatasetSetEntitlementsRequest } from '../models';
// @ts-ignore
import { DraftStatus } from '../models';
// @ts-ignore
import { Entitlement } from '../models';
// @ts-ignore
import { EntryType } from '../models';
// @ts-ignore
import { EntryUpdateResponse } from '../models';
// @ts-ignore
import { Exchange } from '../models';
// @ts-ignore
import { GeospatialExtent } from '../models';
// @ts-ignore
import { GroupCode } from '../models';
// @ts-ignore
import { ImageRepresentation } from '../models';
// @ts-ignore
import { Licence } from '../models';
// @ts-ignore
import { PublicContact } from '../models';
// @ts-ignore
import { PublishedStatus } from '../models';
// @ts-ignore
import { Relationship } from '../models';
// @ts-ignore
import { Resource } from '../models';
// @ts-ignore
import { SpatialCoverage } from '../models';
// @ts-ignore
import { TaxonomyKeywords } from '../models';
// @ts-ignore
import { Topic } from '../models';
// @ts-ignore
import { WorkflowKeywords } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DatasetApi - axios parameter creator
 * @export
 */
export const DatasetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create and attach file dataset. If the file dataset already exists, this will not do anything. Note this should usually be automatically created when creating a catalogue entry. 
         * @summary Create and attach file dataset
         * @param {string} dataSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFileDataset: async (dataSetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            assertParamExists('createFileDataset', 'dataSetId', dataSetId)
            const localVarPath = `/data-sets/{dataSetId}/fileDataset`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId !== undefined ? dataSetId : `-dataSetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/data-sets/{dataSetId}/fileDataset',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a single catalog entry.
         * @summary Create a single data set catalog entry.
         * @param {DatasetCreateSingleCatalogEntryRequest} [datasetCreateSingleCatalogEntryRequest] The data set to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSingleCatalogEntry: async (datasetCreateSingleCatalogEntryRequest?: DatasetCreateSingleCatalogEntryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/data-sets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: datasetCreateSingleCatalogEntryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/data-sets',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(datasetCreateSingleCatalogEntryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a single Data Set
         * @summary Delete a Data Set
         * @param {string} dataSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSingleDataSet: async (dataSetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            assertParamExists('deleteSingleDataSet', 'dataSetId', dataSetId)
            const localVarPath = `/data-sets/{dataSetId}`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId !== undefined ? dataSetId : `-dataSetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/data-sets/{dataSetId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Discards the draft changes on a data set catalog entry.
         * @summary Discards the draft changes on a data set catalog entry.
         * @param {string} dataSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discardDraftChanges: async (dataSetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            assertParamExists('discardDraftChanges', 'dataSetId', dataSetId)
            const localVarPath = `/data-sets/{dataSetId}/draft`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId !== undefined ? dataSetId : `-dataSetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/data-sets/{dataSetId}/draft',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the draft changes on a data set catalog entry.
         * @summary Get the draft changes on a data set catalog entry.
         * @param {string} dataSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDraftChanges: async (dataSetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            assertParamExists('getDraftChanges', 'dataSetId', dataSetId)
            const localVarPath = `/data-sets/{dataSetId}/draft`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId !== undefined ? dataSetId : `-dataSetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/data-sets/{dataSetId}/draft',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the entitlements on a data set.
         * @summary Get the entitlements on a data set.
         * @param {string} dataSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitlements: async (dataSetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            assertParamExists('getEntitlements', 'dataSetId', dataSetId)
            const localVarPath = `/data-sets/{dataSetId}/access`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId !== undefined ? dataSetId : `-dataSetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/data-sets/{dataSetId}/access',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get file dataset id from dataset
         * @summary Get file dataset id from dataset
         * @param {string} dataSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileDatasetId: async (dataSetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            assertParamExists('getFileDatasetId', 'dataSetId', dataSetId)
            const localVarPath = `/data-sets/{dataSetId}/fileDataset`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId !== undefined ? dataSetId : `-dataSetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/data-sets/{dataSetId}/fileDataset',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the DCAT metadata for the given group. This will retrieve metadata for all the non spatial datasets in the public domain.
         * @param {GroupCode} group 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNonSpatialDataForGroup: async (group: GroupCode, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            assertParamExists('getNonSpatialDataForGroup', 'group', group)
            const localVarPath = `/harvest/{group}/dcat`
                .replace(`{${"group"}}`, encodeURIComponent(String(group !== undefined ? group : `-group-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/harvest/{group}/dcat',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single data set catalog entry.
         * @summary Get a single data set catalog entry.
         * @param {string} dataSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleCatalogEntry: async (dataSetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            assertParamExists('getSingleCatalogEntry', 'dataSetId', dataSetId)
            const localVarPath = `/data-sets/{dataSetId}`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId !== undefined ? dataSetId : `-dataSetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/data-sets/{dataSetId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the schematron validation report using the data sets validation profile. Throws an error if there is no validation profile
         * @summary Get the schematron validation report using the data sets validation profile
         * @param {string} dataSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidationReport: async (dataSetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            assertParamExists('getValidationReport', 'dataSetId', dataSetId)
            const localVarPath = `/data-sets/{dataSetId}/validationReport`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId !== undefined ? dataSetId : `-dataSetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/data-sets/{dataSetId}/validationReport',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the schematron validation report using the data sets validation profile. Throws an error if there is no validation profile
         * @summary Get the schematron validation report using the data sets validation profile
         * @param {string} dataSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidationReport_1: async (dataSetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            assertParamExists('getValidationReport_1', 'dataSetId', dataSetId)
            const localVarPath = `/data-sets/{dataSetId}/draft/validationReport`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId !== undefined ? dataSetId : `-dataSetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/data-sets/{dataSetId}/draft/validationReport',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all data sets.
         * @summary List all data sets.
         * @param {Array<string>} [ids] List of data set ids
         * @param {Array<string>} [creator] The creator of the data set.
         * @param {Array<string>} [keywords] Tags describing the data set. keywords is deprecated - use tags instead
         * @param {Array<string>} [tags] Tags describing the data set.
         * @param {Relationship} [tagRelationship] Note - This feature will no longer be available as we are in the process of moving to a different backend and will soon be removed. If provided, include data sets that have been tagged with concepts that are related to the values provided in the &#x60;tags&#x60; parameter. If not provided, only include data sets tagged with exact matches.
         * @param {Array<CategoryValue>} [category] Indicates the type of data
         * @param {Array<SpatialCoverage>} [spatialCoverage] The region the data is applicable to.
         * @param {string} [text] Note - Use extendedText. This field has been deprecated. Free text search for data sets.
         * @param {string} [extendedText] Free text search for data sets matching title; summary; description; tags; concepts; and source.
         * @param {Array<string>} [identities] Only show datasets accessible by these identities. Can be \&#39;PUBLIC\&#39;, a user ID or an organisation ID.
         * @param {boolean} [onlyFeatured] Defines whether to return only featured data sets
         * @param {boolean} [showEditable] Defines whether my editable data sets should be shown.
         * @param {boolean} [showHidden] Defines whether hidden data sets should be shown.
         * @param {number} [pageNum] Set the page number. Should not be specified in conjunction with offset or limit.
         * @param {number} [pageSize] Set the page size. Should not be specified in conjunction with offset or limit.
         * @param {number} [offset] Set the pagination offset. Should not be specified in conjunction with pageNum or pageSize.
         * @param {'title' | 'all'} [searchType] Choose whether to search across all metadata on a data set, or just the title.
         * @param {number} [limit] Set the pagination limit. Should not be specified in conjunction with pageNum or pageSize.
         * @param {boolean} [legacyConcepts] Note - This feature will no longer be available once we move to a different backend. \&quot;Format response to convert any new concepts to legacy concepts\&quot;
         * @param {'title' | 'title-descending' | 'relevance'} [sort] Criterion by which to order the results
         * @param {Exchange} [exchange] The private data exchange for which to retrieve records
         * @param {Array<string>} [metadataStandardName] 
         * @param {Array<DraftStatus>} [draftStatus] 
         * @param {Array<DataSetListAllDataSetsPublishedStatusParameterInner>} [publishedStatus] 
         * @param {Array<string>} [licence] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllDataSets: async (ids?: Array<string>, creator?: Array<string>, keywords?: Array<string>, tags?: Array<string>, tagRelationship?: Relationship, category?: Array<CategoryValue>, spatialCoverage?: Array<SpatialCoverage>, text?: string, extendedText?: string, identities?: Array<string>, onlyFeatured?: boolean, showEditable?: boolean, showHidden?: boolean, pageNum?: number, pageSize?: number, offset?: number, searchType?: 'title' | 'all', limit?: number, legacyConcepts?: boolean, sort?: 'title' | 'title-descending' | 'relevance', exchange?: Exchange, metadataStandardName?: Array<string>, draftStatus?: Array<DraftStatus>, publishedStatus?: Array<DataSetListAllDataSetsPublishedStatusParameterInner>, licence?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/data-sets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (ids) {
                localVarQueryParameter['ids'] = ids;
            }

            if (creator) {
                localVarQueryParameter['creator'] = creator;
            }

            if (keywords) {
                localVarQueryParameter['keywords'] = keywords;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (tagRelationship !== undefined) {
                localVarQueryParameter['tagRelationship'] = tagRelationship;
            }

            if (category) {
                localVarQueryParameter['category'] = category;
            }

            if (spatialCoverage) {
                localVarQueryParameter['spatialCoverage'] = spatialCoverage;
            }

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (extendedText !== undefined) {
                localVarQueryParameter['extendedText'] = extendedText;
            }

            if (identities) {
                localVarQueryParameter['identities'] = identities;
            }

            if (onlyFeatured !== undefined) {
                localVarQueryParameter['onlyFeatured'] = onlyFeatured;
            }

            if (showEditable !== undefined) {
                localVarQueryParameter['showEditable'] = showEditable;
            }

            if (showHidden !== undefined) {
                localVarQueryParameter['showHidden'] = showHidden;
            }

            if (pageNum !== undefined) {
                localVarQueryParameter['pageNum'] = pageNum;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (searchType !== undefined) {
                localVarQueryParameter['searchType'] = searchType;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (legacyConcepts !== undefined) {
                localVarQueryParameter['legacyConcepts'] = legacyConcepts;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (exchange !== undefined) {
                localVarQueryParameter['exchange'] = exchange;
            }

            if (metadataStandardName) {
                localVarQueryParameter['metadataStandardName'] = metadataStandardName;
            }

            if (draftStatus) {
                localVarQueryParameter['draftStatus'] = draftStatus;
            }

            if (publishedStatus) {
                localVarQueryParameter['publishedStatus'] = publishedStatus;
            }

            if (licence) {
                localVarQueryParameter['licence'] = licence;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/data-sets',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all the valid categories of datasets.
         * @summary List all the valid categories of datasets.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listValidCategories: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/categories',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all the valid tags that can be set on a data set.
         * @summary List all the valid tags that can be set on a data set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listValidTags: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tags',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the entitlements and on a data set for all identities.
         * @summary Set the entitlements and on a data set for all identities.
         * @param {string} dataSetId 
         * @param {DatasetSetEntitlementsRequest} [datasetSetEntitlementsRequest] The access to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setEntitlements: async (dataSetId: string, datasetSetEntitlementsRequest?: DatasetSetEntitlementsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            assertParamExists('setEntitlements', 'dataSetId', dataSetId)
            const localVarPath = `/data-sets/{dataSetId}/access`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId !== undefined ? dataSetId : `-dataSetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: datasetSetEntitlementsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/data-sets/{dataSetId}/access',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(datasetSetEntitlementsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set the image for a data set. Can either be an image upload a plain text string representing the unsplash image id.
         * @summary Set the image for a data set.
         * @param {string} dataSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setImage: async (dataSetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            assertParamExists('setImage', 'dataSetId', dataSetId)
            const localVarPath = `/data-sets/{dataSetId}/image`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId !== undefined ? dataSetId : `-dataSetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/data-sets/{dataSetId}/image',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a single catalog entry.
         * @summary Update a single data set catalog entry.
         * @param {string} dataSetId 
         * @param {DataSetPatch} dataSetPatch The updated data set information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSingleCatalogEntry: async (dataSetId: string, dataSetPatch: DataSetPatch, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            assertParamExists('updateSingleCatalogEntry', 'dataSetId', dataSetId)
            // verify required parameter 'dataSetPatch' is not null or undefined
            assertParamExists('updateSingleCatalogEntry', 'dataSetPatch', dataSetPatch)
            const localVarPath = `/data-sets/{dataSetId}`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId !== undefined ? dataSetId : `-dataSetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: dataSetPatch,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/data-sets/{dataSetId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(dataSetPatch, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a single catalog entry.
         * @summary Update a single data set catalog entry.
         * @param {string} dataSetId 
         * @param {DataSet} dataSet The updated data set information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSingleEntry: async (dataSetId: string, dataSet: DataSet, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dataSetId' is not null or undefined
            assertParamExists('updateSingleEntry', 'dataSetId', dataSetId)
            // verify required parameter 'dataSet' is not null or undefined
            assertParamExists('updateSingleEntry', 'dataSet', dataSet)
            const localVarPath = `/data-sets/{dataSetId}`
                .replace(`{${"dataSetId"}}`, encodeURIComponent(String(dataSetId !== undefined ? dataSetId : `-dataSetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: dataSet,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/data-sets/{dataSetId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(dataSet, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatasetApi - functional programming interface
 * @export
 */
export const DatasetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DatasetApiAxiosParamCreator(configuration)
    return {
        /**
         * Create and attach file dataset. If the file dataset already exists, this will not do anything. Note this should usually be automatically created when creating a catalogue entry. 
         * @summary Create and attach file dataset
         * @param {DatasetApiCreateFileDatasetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFileDataset(requestParameters: DatasetApiCreateFileDatasetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetCreateFileDatasetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFileDataset(requestParameters.dataSetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a single catalog entry.
         * @summary Create a single data set catalog entry.
         * @param {DatasetApiCreateSingleCatalogEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSingleCatalogEntry(requestParameters: DatasetApiCreateSingleCatalogEntryRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntryUpdateResponse>> {
            const datasetCreateSingleCatalogEntryRequest: DatasetCreateSingleCatalogEntryRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSingleCatalogEntry(datasetCreateSingleCatalogEntryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a single Data Set
         * @summary Delete a Data Set
         * @param {DatasetApiDeleteSingleDataSetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSingleDataSet(requestParameters: DatasetApiDeleteSingleDataSetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetDeleteSingleDataSetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSingleDataSet(requestParameters.dataSetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Discards the draft changes on a data set catalog entry.
         * @summary Discards the draft changes on a data set catalog entry.
         * @param {DatasetApiDiscardDraftChangesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discardDraftChanges(requestParameters: DatasetApiDiscardDraftChangesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discardDraftChanges(requestParameters.dataSetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the draft changes on a data set catalog entry.
         * @summary Get the draft changes on a data set catalog entry.
         * @param {DatasetApiGetDraftChangesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDraftChanges(requestParameters: DatasetApiGetDraftChangesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataSet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDraftChanges(requestParameters.dataSetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the entitlements on a data set.
         * @summary Get the entitlements on a data set.
         * @param {DatasetApiGetEntitlementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntitlements(requestParameters: DatasetApiGetEntitlementsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetGetEntitlementsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntitlements(requestParameters.dataSetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get file dataset id from dataset
         * @summary Get file dataset id from dataset
         * @param {DatasetApiGetFileDatasetIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileDatasetId(requestParameters: DatasetApiGetFileDatasetIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetGetFileDatasetIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileDatasetId(requestParameters.dataSetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the DCAT metadata for the given group. This will retrieve metadata for all the non spatial datasets in the public domain.
         * @param {DatasetApiGetNonSpatialDataForGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNonSpatialDataForGroup(requestParameters: DatasetApiGetNonSpatialDataForGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNonSpatialDataForGroup(requestParameters.group, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a single data set catalog entry.
         * @summary Get a single data set catalog entry.
         * @param {DatasetApiGetSingleCatalogEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleCatalogEntry(requestParameters: DatasetApiGetSingleCatalogEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataSet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleCatalogEntry(requestParameters.dataSetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the schematron validation report using the data sets validation profile. Throws an error if there is no validation profile
         * @summary Get the schematron validation report using the data sets validation profile
         * @param {DatasetApiGetValidationReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getValidationReport(requestParameters: DatasetApiGetValidationReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetGetValidationReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getValidationReport(requestParameters.dataSetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the schematron validation report using the data sets validation profile. Throws an error if there is no validation profile
         * @summary Get the schematron validation report using the data sets validation profile
         * @param {DatasetApiGetValidationReport0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getValidationReport_1(requestParameters: DatasetApiGetValidationReport0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetGetValidationReport200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getValidationReport_1(requestParameters.dataSetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all data sets.
         * @summary List all data sets.
         * @param {DatasetApiListAllDataSetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllDataSets(requestParameters: DatasetApiListAllDataSetsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataSets>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllDataSets(requestParameters.ids, requestParameters.creator, requestParameters.keywords, requestParameters.tags, requestParameters.tagRelationship, requestParameters.category, requestParameters.spatialCoverage, requestParameters.text, requestParameters.extendedText, requestParameters.identities, requestParameters.onlyFeatured, requestParameters.showEditable, requestParameters.showHidden, requestParameters.pageNum, requestParameters.pageSize, requestParameters.offset, requestParameters.searchType, requestParameters.limit, requestParameters.legacyConcepts, requestParameters.sort, requestParameters.exchange, requestParameters.metadataStandardName, requestParameters.draftStatus, requestParameters.publishedStatus, requestParameters.licence, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all the valid categories of datasets.
         * @summary List all the valid categories of datasets.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listValidCategories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Category>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listValidCategories(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all the valid tags that can be set on a data set.
         * @summary List all the valid tags that can be set on a data set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listValidTags(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatasetListValidTagsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listValidTags(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set the entitlements and on a data set for all identities.
         * @summary Set the entitlements and on a data set for all identities.
         * @param {DatasetApiSetEntitlementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setEntitlements(requestParameters: DatasetApiSetEntitlementsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const datasetSetEntitlementsRequest: DatasetSetEntitlementsRequest = {
                entitlements: requestParameters.entitlements
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setEntitlements(requestParameters.dataSetId, datasetSetEntitlementsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Set the image for a data set. Can either be an image upload a plain text string representing the unsplash image id.
         * @summary Set the image for a data set.
         * @param {DatasetApiSetImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setImage(requestParameters: DatasetApiSetImageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setImage(requestParameters.dataSetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a single catalog entry.
         * @summary Update a single data set catalog entry.
         * @param {DatasetApiUpdateSingleCatalogEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSingleCatalogEntry(requestParameters: DatasetApiUpdateSingleCatalogEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataSet>> {
            const dataSetPatch: DataSetPatch = {
                tags: requestParameters.tags,
                summary: requestParameters.summary,
                title: requestParameters.title,
                description: requestParameters.description,
                alternativeTitles: requestParameters.alternativeTitles,
                scoringURI: requestParameters.scoringURI,
                endpointKey: requestParameters.endpointKey,
                derivedFrom: requestParameters.derivedFrom,
                creator: requestParameters.creator,
                dataReliability: requestParameters.dataReliability,
                license: requestParameters.license,
                licence: requestParameters.licence,
                resources: requestParameters.resources,
                dataFormats: requestParameters.dataFormats,
                spatialCoverage: requestParameters.spatialCoverage,
                spatialResolution: requestParameters.spatialResolution,
                geospatialExtent: requestParameters.geospatialExtent,
                temporalCoverage: requestParameters.temporalCoverage,
                temporalExtent: requestParameters.temporalExtent,
                temporalResolution: requestParameters.temporalResolution,
                topics: requestParameters.topics,
                workflowKeywords: requestParameters.workflowKeywords,
                taxonomyKeywords: requestParameters.taxonomyKeywords,
                accrualPeriodicity: requestParameters.accrualPeriodicity,
                issued: requestParameters.issued,
                createdAt: requestParameters.createdAt,
                published: requestParameters.published,
                publishedStatus: requestParameters.publishedStatus,
                modified: requestParameters.modified,
                category: requestParameters.category,
                visibility: requestParameters.visibility,
                pricingDescription: requestParameters.pricingDescription,
                distributions: requestParameters.distributions,
                approvalForAccessNumber: requestParameters.approvalForAccessNumber,
                approvalForAccessStatus: requestParameters.approvalForAccessStatus,
                contacts: requestParameters.contacts,
                metadataContact: requestParameters.metadataContact,
                lineage: requestParameters.lineage,
                language: requestParameters.language,
                characterSet: requestParameters.characterSet,
                hierarchyLevel: requestParameters.hierarchyLevel,
                metadataLanguage: requestParameters.metadataLanguage,
                metadataCharacterSet: requestParameters.metadataCharacterSet,
                metadataStandardName: requestParameters.metadataStandardName,
                metadataStandardVersion: requestParameters.metadataStandardVersion,
                coordinateReferenceSystemId: requestParameters.coordinateReferenceSystemId,
                spatialRepresentationType: requestParameters.spatialRepresentationType
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSingleCatalogEntry(requestParameters.dataSetId, dataSetPatch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a single catalog entry.
         * @summary Update a single data set catalog entry.
         * @param {DatasetApiUpdateSingleEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSingleEntry(requestParameters: DatasetApiUpdateSingleEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataSet>> {
            const dataSet: DataSet = {
                tags: requestParameters.tags,
                summary: requestParameters.summary,
                title: requestParameters.title,
                description: requestParameters.description,
                id: requestParameters.id,
                entryType: requestParameters.entryType,
                exchange: requestParameters.exchange,
                alternativeTitles: requestParameters.alternativeTitles,
                scoringURI: requestParameters.scoringURI,
                endpointKey: requestParameters.endpointKey,
                isOwner: requestParameters.isOwner,
                publisher: requestParameters.publisher,
                createdAt: requestParameters.createdAt,
                published: requestParameters.published,
                metadataModified: requestParameters.metadataModified,
                usedBy: requestParameters.usedBy,
                derivedFrom: requestParameters.derivedFrom,
                entitlements: requestParameters.entitlements,
                entitlementsByIdentity: requestParameters.entitlementsByIdentity,
                creator: requestParameters.creator,
                dataReliability: requestParameters.dataReliability,
                license: requestParameters.license,
                licence: requestParameters.licence,
                landingPage: requestParameters.landingPage,
                resources: requestParameters.resources,
                dataFormats: requestParameters.dataFormats,
                pricingDescription: requestParameters.pricingDescription,
                spatialCoverage: requestParameters.spatialCoverage,
                spatialResolution: requestParameters.spatialResolution,
                geospatialExtent: requestParameters.geospatialExtent,
                temporalCoverage: requestParameters.temporalCoverage,
                temporalResolution: requestParameters.temporalResolution,
                accrualPeriodicity: requestParameters.accrualPeriodicity,
                distributions: requestParameters.distributions,
                issued: requestParameters.issued,
                modified: requestParameters.modified,
                keywords: requestParameters.keywords,
                topics: requestParameters.topics,
                workflowKeywords: requestParameters.workflowKeywords,
                taxonomyKeywords: requestParameters.taxonomyKeywords,
                category: requestParameters.category,
                visibility: requestParameters.visibility,
                concepts: requestParameters.concepts,
                dataSet: requestParameters.dataSet,
                services: requestParameters.services,
                sampleData: requestParameters.sampleData,
                image: requestParameters.image,
                coordinateReferenceSystemId: requestParameters.coordinateReferenceSystemId,
                spatialRepresentationType: requestParameters.spatialRepresentationType,
                lineage: requestParameters.lineage,
                fromTemplate: requestParameters.fromTemplate,
                contacts: requestParameters.contacts,
                metadataContact: requestParameters.metadataContact,
                publicContact: requestParameters.publicContact,
                approvalForAccessNumber: requestParameters.approvalForAccessNumber,
                approvalForAccessStatus: requestParameters.approvalForAccessStatus,
                language: requestParameters.language,
                characterSet: requestParameters.characterSet,
                hierarchyLevel: requestParameters.hierarchyLevel,
                metadataLanguage: requestParameters.metadataLanguage,
                metadataCharacterSet: requestParameters.metadataCharacterSet,
                metadataStandardName: requestParameters.metadataStandardName,
                metadataStandardVersion: requestParameters.metadataStandardVersion,
                draftStatus: requestParameters.draftStatus,
                draftNotes: requestParameters.draftNotes,
                publishedStatus: requestParameters.publishedStatus
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSingleEntry(requestParameters.dataSetId, dataSet, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DatasetApi - factory interface
 * @export
 */
export const DatasetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DatasetApiFp(configuration)
    return {
        /**
         * Create and attach file dataset. If the file dataset already exists, this will not do anything. Note this should usually be automatically created when creating a catalogue entry. 
         * @summary Create and attach file dataset
         * @param {DatasetApiCreateFileDatasetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFileDataset(requestParameters: DatasetApiCreateFileDatasetRequest, options?: AxiosRequestConfig): AxiosPromise<DatasetCreateFileDatasetResponse> {
            return localVarFp.createFileDataset(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a single catalog entry.
         * @summary Create a single data set catalog entry.
         * @param {DatasetApiCreateSingleCatalogEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSingleCatalogEntry(requestParameters: DatasetApiCreateSingleCatalogEntryRequest = {}, options?: AxiosRequestConfig): AxiosPromise<EntryUpdateResponse> {
            return localVarFp.createSingleCatalogEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a single Data Set
         * @summary Delete a Data Set
         * @param {DatasetApiDeleteSingleDataSetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSingleDataSet(requestParameters: DatasetApiDeleteSingleDataSetRequest, options?: AxiosRequestConfig): AxiosPromise<DatasetDeleteSingleDataSetResponse> {
            return localVarFp.deleteSingleDataSet(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Discards the draft changes on a data set catalog entry.
         * @summary Discards the draft changes on a data set catalog entry.
         * @param {DatasetApiDiscardDraftChangesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discardDraftChanges(requestParameters: DatasetApiDiscardDraftChangesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.discardDraftChanges(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the draft changes on a data set catalog entry.
         * @summary Get the draft changes on a data set catalog entry.
         * @param {DatasetApiGetDraftChangesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDraftChanges(requestParameters: DatasetApiGetDraftChangesRequest, options?: AxiosRequestConfig): AxiosPromise<DataSet> {
            return localVarFp.getDraftChanges(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the entitlements on a data set.
         * @summary Get the entitlements on a data set.
         * @param {DatasetApiGetEntitlementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitlements(requestParameters: DatasetApiGetEntitlementsRequest, options?: AxiosRequestConfig): AxiosPromise<DatasetGetEntitlementsResponse> {
            return localVarFp.getEntitlements(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get file dataset id from dataset
         * @summary Get file dataset id from dataset
         * @param {DatasetApiGetFileDatasetIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileDatasetId(requestParameters: DatasetApiGetFileDatasetIdRequest, options?: AxiosRequestConfig): AxiosPromise<DatasetGetFileDatasetIdResponse> {
            return localVarFp.getFileDatasetId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the DCAT metadata for the given group. This will retrieve metadata for all the non spatial datasets in the public domain.
         * @param {DatasetApiGetNonSpatialDataForGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNonSpatialDataForGroup(requestParameters: DatasetApiGetNonSpatialDataForGroupRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getNonSpatialDataForGroup(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single data set catalog entry.
         * @summary Get a single data set catalog entry.
         * @param {DatasetApiGetSingleCatalogEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleCatalogEntry(requestParameters: DatasetApiGetSingleCatalogEntryRequest, options?: AxiosRequestConfig): AxiosPromise<DataSet> {
            return localVarFp.getSingleCatalogEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the schematron validation report using the data sets validation profile. Throws an error if there is no validation profile
         * @summary Get the schematron validation report using the data sets validation profile
         * @param {DatasetApiGetValidationReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidationReport(requestParameters: DatasetApiGetValidationReportRequest, options?: AxiosRequestConfig): AxiosPromise<DatasetGetValidationReportResponse> {
            return localVarFp.getValidationReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the schematron validation report using the data sets validation profile. Throws an error if there is no validation profile
         * @summary Get the schematron validation report using the data sets validation profile
         * @param {DatasetApiGetValidationReport0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidationReport_1(requestParameters: DatasetApiGetValidationReport0Request, options?: AxiosRequestConfig): AxiosPromise<DatasetGetValidationReport200Response> {
            return localVarFp.getValidationReport_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all data sets.
         * @summary List all data sets.
         * @param {DatasetApiListAllDataSetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllDataSets(requestParameters: DatasetApiListAllDataSetsRequest, options?: AxiosRequestConfig): AxiosPromise<DataSets> {
            return localVarFp.listAllDataSets(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all the valid categories of datasets.
         * @summary List all the valid categories of datasets.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listValidCategories(options?: AxiosRequestConfig): AxiosPromise<Array<Category>> {
            return localVarFp.listValidCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * List all the valid tags that can be set on a data set.
         * @summary List all the valid tags that can be set on a data set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listValidTags(options?: AxiosRequestConfig): AxiosPromise<DatasetListValidTagsResponse> {
            return localVarFp.listValidTags(options).then((request) => request(axios, basePath));
        },
        /**
         * Set the entitlements and on a data set for all identities.
         * @summary Set the entitlements and on a data set for all identities.
         * @param {DatasetApiSetEntitlementsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setEntitlements(requestParameters: DatasetApiSetEntitlementsRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.setEntitlements(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Set the image for a data set. Can either be an image upload a plain text string representing the unsplash image id.
         * @summary Set the image for a data set.
         * @param {DatasetApiSetImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setImage(requestParameters: DatasetApiSetImageRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setImage(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a single catalog entry.
         * @summary Update a single data set catalog entry.
         * @param {DatasetApiUpdateSingleCatalogEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSingleCatalogEntry(requestParameters: DatasetApiUpdateSingleCatalogEntryRequest, options?: AxiosRequestConfig): AxiosPromise<DataSet> {
            return localVarFp.updateSingleCatalogEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a single catalog entry.
         * @summary Update a single data set catalog entry.
         * @param {DatasetApiUpdateSingleEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSingleEntry(requestParameters: DatasetApiUpdateSingleEntryRequest, options?: AxiosRequestConfig): AxiosPromise<DataSet> {
            return localVarFp.updateSingleEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createFileDataset operation in DatasetApi.
 * @export
 * @interface DatasetApiCreateFileDatasetRequest
 */
export type DatasetApiCreateFileDatasetRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DatasetApiCreateFileDataset
    */
    readonly dataSetId: string
    
}

/**
 * Request parameters for createSingleCatalogEntry operation in DatasetApi.
 * @export
 * @interface DatasetApiCreateSingleCatalogEntryRequest
 */
export type DatasetApiCreateSingleCatalogEntryRequest = {
    
} & DatasetCreateSingleCatalogEntryRequest

/**
 * Request parameters for deleteSingleDataSet operation in DatasetApi.
 * @export
 * @interface DatasetApiDeleteSingleDataSetRequest
 */
export type DatasetApiDeleteSingleDataSetRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DatasetApiDeleteSingleDataSet
    */
    readonly dataSetId: string
    
}

/**
 * Request parameters for discardDraftChanges operation in DatasetApi.
 * @export
 * @interface DatasetApiDiscardDraftChangesRequest
 */
export type DatasetApiDiscardDraftChangesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DatasetApiDiscardDraftChanges
    */
    readonly dataSetId: string
    
}

/**
 * Request parameters for getDraftChanges operation in DatasetApi.
 * @export
 * @interface DatasetApiGetDraftChangesRequest
 */
export type DatasetApiGetDraftChangesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DatasetApiGetDraftChanges
    */
    readonly dataSetId: string
    
}

/**
 * Request parameters for getEntitlements operation in DatasetApi.
 * @export
 * @interface DatasetApiGetEntitlementsRequest
 */
export type DatasetApiGetEntitlementsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DatasetApiGetEntitlements
    */
    readonly dataSetId: string
    
}

/**
 * Request parameters for getFileDatasetId operation in DatasetApi.
 * @export
 * @interface DatasetApiGetFileDatasetIdRequest
 */
export type DatasetApiGetFileDatasetIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DatasetApiGetFileDatasetId
    */
    readonly dataSetId: string
    
}

/**
 * Request parameters for getNonSpatialDataForGroup operation in DatasetApi.
 * @export
 * @interface DatasetApiGetNonSpatialDataForGroupRequest
 */
export type DatasetApiGetNonSpatialDataForGroupRequest = {
    
    /**
    * 
    * @type {GroupCode}
    * @memberof DatasetApiGetNonSpatialDataForGroup
    */
    readonly group: GroupCode
    
}

/**
 * Request parameters for getSingleCatalogEntry operation in DatasetApi.
 * @export
 * @interface DatasetApiGetSingleCatalogEntryRequest
 */
export type DatasetApiGetSingleCatalogEntryRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DatasetApiGetSingleCatalogEntry
    */
    readonly dataSetId: string
    
}

/**
 * Request parameters for getValidationReport operation in DatasetApi.
 * @export
 * @interface DatasetApiGetValidationReportRequest
 */
export type DatasetApiGetValidationReportRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DatasetApiGetValidationReport
    */
    readonly dataSetId: string
    
}

/**
 * Request parameters for getValidationReport_1 operation in DatasetApi.
 * @export
 * @interface DatasetApiGetValidationReport0Request
 */
export type DatasetApiGetValidationReport0Request = {
    
    /**
    * 
    * @type {string}
    * @memberof DatasetApiGetValidationReport0
    */
    readonly dataSetId: string
    
}

/**
 * Request parameters for listAllDataSets operation in DatasetApi.
 * @export
 * @interface DatasetApiListAllDataSetsRequest
 */
export type DatasetApiListAllDataSetsRequest = {
    
    /**
    * List of data set ids
    * @type {Array<string>}
    * @memberof DatasetApiListAllDataSets
    */
    readonly ids?: Array<string>
    
    /**
    * The creator of the data set.
    * @type {Array<string>}
    * @memberof DatasetApiListAllDataSets
    */
    readonly creator?: Array<string>
    
    /**
    * Tags describing the data set. keywords is deprecated - use tags instead
    * @type {Array<string>}
    * @memberof DatasetApiListAllDataSets
    */
    readonly keywords?: Array<string>
    
    /**
    * Tags describing the data set.
    * @type {Array<string>}
    * @memberof DatasetApiListAllDataSets
    */
    readonly tags?: Array<string>
    
    /**
    * Note - This feature will no longer be available as we are in the process of moving to a different backend and will soon be removed. If provided, include data sets that have been tagged with concepts that are related to the values provided in the `tags` parameter. If not provided, only include data sets tagged with exact matches.
    * @type {Relationship}
    * @memberof DatasetApiListAllDataSets
    */
    readonly tagRelationship?: Relationship
    
    /**
    * Indicates the type of data
    * @type {Array<CategoryValue>}
    * @memberof DatasetApiListAllDataSets
    */
    readonly category?: Array<CategoryValue>
    
    /**
    * The region the data is applicable to.
    * @type {Array<SpatialCoverage>}
    * @memberof DatasetApiListAllDataSets
    */
    readonly spatialCoverage?: Array<SpatialCoverage>
    
    /**
    * Note - Use extendedText. This field has been deprecated. Free text search for data sets.
    * @type {string}
    * @memberof DatasetApiListAllDataSets
    */
    readonly text?: string
    
    /**
    * Free text search for data sets matching title; summary; description; tags; concepts; and source.
    * @type {string}
    * @memberof DatasetApiListAllDataSets
    */
    readonly extendedText?: string
    
    /**
    * Only show datasets accessible by these identities. Can be \'PUBLIC\', a user ID or an organisation ID.
    * @type {Array<string>}
    * @memberof DatasetApiListAllDataSets
    */
    readonly identities?: Array<string>
    
    /**
    * Defines whether to return only featured data sets
    * @type {boolean}
    * @memberof DatasetApiListAllDataSets
    */
    readonly onlyFeatured?: boolean
    
    /**
    * Defines whether my editable data sets should be shown.
    * @type {boolean}
    * @memberof DatasetApiListAllDataSets
    */
    readonly showEditable?: boolean
    
    /**
    * Defines whether hidden data sets should be shown.
    * @type {boolean}
    * @memberof DatasetApiListAllDataSets
    */
    readonly showHidden?: boolean
    
    /**
    * Set the page number. Should not be specified in conjunction with offset or limit.
    * @type {number}
    * @memberof DatasetApiListAllDataSets
    */
    readonly pageNum?: number
    
    /**
    * Set the page size. Should not be specified in conjunction with offset or limit.
    * @type {number}
    * @memberof DatasetApiListAllDataSets
    */
    readonly pageSize?: number
    
    /**
    * Set the pagination offset. Should not be specified in conjunction with pageNum or pageSize.
    * @type {number}
    * @memberof DatasetApiListAllDataSets
    */
    readonly offset?: number
    
    /**
    * Choose whether to search across all metadata on a data set, or just the title.
    * @type {'title' | 'all'}
    * @memberof DatasetApiListAllDataSets
    */
    readonly searchType?: 'title' | 'all'
    
    /**
    * Set the pagination limit. Should not be specified in conjunction with pageNum or pageSize.
    * @type {number}
    * @memberof DatasetApiListAllDataSets
    */
    readonly limit?: number
    
    /**
    * Note - This feature will no longer be available once we move to a different backend. \"Format response to convert any new concepts to legacy concepts\"
    * @type {boolean}
    * @memberof DatasetApiListAllDataSets
    */
    readonly legacyConcepts?: boolean
    
    /**
    * Criterion by which to order the results
    * @type {'title' | 'title-descending' | 'relevance'}
    * @memberof DatasetApiListAllDataSets
    */
    readonly sort?: 'title' | 'title-descending' | 'relevance'
    
    /**
    * The private data exchange for which to retrieve records
    * @type {Exchange}
    * @memberof DatasetApiListAllDataSets
    */
    readonly exchange?: Exchange
    
    /**
    * 
    * @type {Array<string>}
    * @memberof DatasetApiListAllDataSets
    */
    readonly metadataStandardName?: Array<string>
    
    /**
    * 
    * @type {Array<DraftStatus>}
    * @memberof DatasetApiListAllDataSets
    */
    readonly draftStatus?: Array<DraftStatus>
    
    /**
    * 
    * @type {Array<DataSetListAllDataSetsPublishedStatusParameterInner>}
    * @memberof DatasetApiListAllDataSets
    */
    readonly publishedStatus?: Array<DataSetListAllDataSetsPublishedStatusParameterInner>
    
    /**
    * 
    * @type {Array<string>}
    * @memberof DatasetApiListAllDataSets
    */
    readonly licence?: Array<string>
    
}

/**
 * Request parameters for setEntitlements operation in DatasetApi.
 * @export
 * @interface DatasetApiSetEntitlementsRequest
 */
export type DatasetApiSetEntitlementsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DatasetApiSetEntitlements
    */
    readonly dataSetId: string
    
} & DatasetSetEntitlementsRequest

/**
 * Request parameters for setImage operation in DatasetApi.
 * @export
 * @interface DatasetApiSetImageRequest
 */
export type DatasetApiSetImageRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DatasetApiSetImage
    */
    readonly dataSetId: string
    
}

/**
 * Request parameters for updateSingleCatalogEntry operation in DatasetApi.
 * @export
 * @interface DatasetApiUpdateSingleCatalogEntryRequest
 */
export type DatasetApiUpdateSingleCatalogEntryRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DatasetApiUpdateSingleCatalogEntry
    */
    readonly dataSetId: string
    
} & DataSetPatch

/**
 * Request parameters for updateSingleEntry operation in DatasetApi.
 * @export
 * @interface DatasetApiUpdateSingleEntryRequest
 */
export type DatasetApiUpdateSingleEntryRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DatasetApiUpdateSingleEntry
    */
    readonly dataSetId: string
    
} & DataSet

/**
 * DatasetApiGenerated - object-oriented interface
 * @export
 * @class DatasetApiGenerated
 * @extends {BaseAPI}
 */
export class DatasetApiGenerated extends BaseAPI {
    /**
     * Create and attach file dataset. If the file dataset already exists, this will not do anything. Note this should usually be automatically created when creating a catalogue entry. 
     * @summary Create and attach file dataset
     * @param {DatasetApiCreateFileDatasetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetApiGenerated
     */
    public createFileDataset(requestParameters: DatasetApiCreateFileDatasetRequest, options?: AxiosRequestConfig) {
        return DatasetApiFp(this.configuration).createFileDataset(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a single catalog entry.
     * @summary Create a single data set catalog entry.
     * @param {DatasetApiCreateSingleCatalogEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetApiGenerated
     */
    public createSingleCatalogEntry(requestParameters: DatasetApiCreateSingleCatalogEntryRequest = {}, options?: AxiosRequestConfig) {
        return DatasetApiFp(this.configuration).createSingleCatalogEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a single Data Set
     * @summary Delete a Data Set
     * @param {DatasetApiDeleteSingleDataSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetApiGenerated
     */
    public deleteSingleDataSet(requestParameters: DatasetApiDeleteSingleDataSetRequest, options?: AxiosRequestConfig) {
        return DatasetApiFp(this.configuration).deleteSingleDataSet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Discards the draft changes on a data set catalog entry.
     * @summary Discards the draft changes on a data set catalog entry.
     * @param {DatasetApiDiscardDraftChangesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetApiGenerated
     */
    public discardDraftChanges(requestParameters: DatasetApiDiscardDraftChangesRequest, options?: AxiosRequestConfig) {
        return DatasetApiFp(this.configuration).discardDraftChanges(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the draft changes on a data set catalog entry.
     * @summary Get the draft changes on a data set catalog entry.
     * @param {DatasetApiGetDraftChangesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetApiGenerated
     */
    public getDraftChanges(requestParameters: DatasetApiGetDraftChangesRequest, options?: AxiosRequestConfig) {
        return DatasetApiFp(this.configuration).getDraftChanges(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the entitlements on a data set.
     * @summary Get the entitlements on a data set.
     * @param {DatasetApiGetEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetApiGenerated
     */
    public getEntitlements(requestParameters: DatasetApiGetEntitlementsRequest, options?: AxiosRequestConfig) {
        return DatasetApiFp(this.configuration).getEntitlements(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get file dataset id from dataset
     * @summary Get file dataset id from dataset
     * @param {DatasetApiGetFileDatasetIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetApiGenerated
     */
    public getFileDatasetId(requestParameters: DatasetApiGetFileDatasetIdRequest, options?: AxiosRequestConfig) {
        return DatasetApiFp(this.configuration).getFileDatasetId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the DCAT metadata for the given group. This will retrieve metadata for all the non spatial datasets in the public domain.
     * @param {DatasetApiGetNonSpatialDataForGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetApiGenerated
     */
    public getNonSpatialDataForGroup(requestParameters: DatasetApiGetNonSpatialDataForGroupRequest, options?: AxiosRequestConfig) {
        return DatasetApiFp(this.configuration).getNonSpatialDataForGroup(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single data set catalog entry.
     * @summary Get a single data set catalog entry.
     * @param {DatasetApiGetSingleCatalogEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetApiGenerated
     */
    public getSingleCatalogEntry(requestParameters: DatasetApiGetSingleCatalogEntryRequest, options?: AxiosRequestConfig) {
        return DatasetApiFp(this.configuration).getSingleCatalogEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the schematron validation report using the data sets validation profile. Throws an error if there is no validation profile
     * @summary Get the schematron validation report using the data sets validation profile
     * @param {DatasetApiGetValidationReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetApiGenerated
     */
    public getValidationReport(requestParameters: DatasetApiGetValidationReportRequest, options?: AxiosRequestConfig) {
        return DatasetApiFp(this.configuration).getValidationReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the schematron validation report using the data sets validation profile. Throws an error if there is no validation profile
     * @summary Get the schematron validation report using the data sets validation profile
     * @param {DatasetApiGetValidationReport0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetApiGenerated
     */
    public getValidationReport_1(requestParameters: DatasetApiGetValidationReport0Request, options?: AxiosRequestConfig) {
        return DatasetApiFp(this.configuration).getValidationReport_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all data sets.
     * @summary List all data sets.
     * @param {DatasetApiListAllDataSetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetApiGenerated
     */
    public listAllDataSets(requestParameters: DatasetApiListAllDataSetsRequest, options?: AxiosRequestConfig) {
        return DatasetApiFp(this.configuration).listAllDataSets(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all the valid categories of datasets.
     * @summary List all the valid categories of datasets.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetApiGenerated
     */
    public listValidCategories(options?: AxiosRequestConfig) {
        return DatasetApiFp(this.configuration).listValidCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all the valid tags that can be set on a data set.
     * @summary List all the valid tags that can be set on a data set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetApiGenerated
     */
    public listValidTags(options?: AxiosRequestConfig) {
        return DatasetApiFp(this.configuration).listValidTags(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the entitlements and on a data set for all identities.
     * @summary Set the entitlements and on a data set for all identities.
     * @param {DatasetApiSetEntitlementsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetApiGenerated
     */
    public setEntitlements(requestParameters: DatasetApiSetEntitlementsRequest, options?: AxiosRequestConfig) {
        return DatasetApiFp(this.configuration).setEntitlements(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Set the image for a data set. Can either be an image upload a plain text string representing the unsplash image id.
     * @summary Set the image for a data set.
     * @param {DatasetApiSetImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetApiGenerated
     */
    public setImage(requestParameters: DatasetApiSetImageRequest, options?: AxiosRequestConfig) {
        return DatasetApiFp(this.configuration).setImage(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a single catalog entry.
     * @summary Update a single data set catalog entry.
     * @param {DatasetApiUpdateSingleCatalogEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetApiGenerated
     */
    public updateSingleCatalogEntry(requestParameters: DatasetApiUpdateSingleCatalogEntryRequest, options?: AxiosRequestConfig) {
        return DatasetApiFp(this.configuration).updateSingleCatalogEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a single catalog entry.
     * @summary Update a single data set catalog entry.
     * @param {DatasetApiUpdateSingleEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatasetApiGenerated
     */
    public updateSingleEntry(requestParameters: DatasetApiUpdateSingleEntryRequest, options?: AxiosRequestConfig) {
        return DatasetApiFp(this.configuration).updateSingleEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
