/* tslint:disable */
/* eslint-disable */
/*
Catalog API

This API lists data sets available on Agrimetrics platform.

The version of the OpenAPI document: 


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ManageDatasetIngestFileNewLayerRequest } from '../models';
// @ts-ignore
import { NewLayers } from '../models';
// @ts-ignore
import { RestError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ManageDatasetApi - axios parameter creator
 * @export
 */
export const ManageDatasetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Ingest a file that has been uploaded to the catalog to create a new layer. See [supported ingest formats](doc:supported-ingest-formats) for supported formats. 
         * @summary Ingest file to new layer
         * @param {string} datasetId 
         * @param {ManageDatasetIngestFileNewLayerRequest} manageDatasetIngestFileNewLayerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ingestFileNewLayer: async (datasetId: string, manageDatasetIngestFileNewLayerRequest: ManageDatasetIngestFileNewLayerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('ingestFileNewLayer', 'datasetId', datasetId)
            // verify required parameter 'manageDatasetIngestFileNewLayerRequest' is not null or undefined
            assertParamExists('ingestFileNewLayer', 'manageDatasetIngestFileNewLayerRequest', manageDatasetIngestFileNewLayerRequest)
            const localVarPath = `/datasets/{datasetId}/layers`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: manageDatasetIngestFileNewLayerRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/layers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(manageDatasetIngestFileNewLayerRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ManageDatasetApi - functional programming interface
 * @export
 */
export const ManageDatasetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ManageDatasetApiAxiosParamCreator(configuration)
    return {
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Ingest a file that has been uploaded to the catalog to create a new layer. See [supported ingest formats](doc:supported-ingest-formats) for supported formats. 
         * @summary Ingest file to new layer
         * @param {ManageDatasetApiIngestFileNewLayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ingestFileNewLayer(requestParameters: ManageDatasetApiIngestFileNewLayerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewLayers>> {
            const manageDatasetIngestFileNewLayerRequest: ManageDatasetIngestFileNewLayerRequest = {
                fileUri: requestParameters.fileUri
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.ingestFileNewLayer(requestParameters.datasetId, manageDatasetIngestFileNewLayerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ManageDatasetApi - factory interface
 * @export
 */
export const ManageDatasetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ManageDatasetApiFp(configuration)
    return {
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Ingest a file that has been uploaded to the catalog to create a new layer. See [supported ingest formats](doc:supported-ingest-formats) for supported formats. 
         * @summary Ingest file to new layer
         * @param {ManageDatasetApiIngestFileNewLayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ingestFileNewLayer(requestParameters: ManageDatasetApiIngestFileNewLayerRequest, options?: AxiosRequestConfig): AxiosPromise<NewLayers> {
            return localVarFp.ingestFileNewLayer(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for ingestFileNewLayer operation in ManageDatasetApi.
 * @export
 * @interface ManageDatasetApiIngestFileNewLayerRequest
 */
export type ManageDatasetApiIngestFileNewLayerRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ManageDatasetApiIngestFileNewLayer
    */
    readonly datasetId: string
    
} & ManageDatasetIngestFileNewLayerRequest

/**
 * ManageDatasetApiGenerated - object-oriented interface
 * @export
 * @class ManageDatasetApiGenerated
 * @extends {BaseAPI}
 */
export class ManageDatasetApiGenerated extends BaseAPI {
    /**
     * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Ingest a file that has been uploaded to the catalog to create a new layer. See [supported ingest formats](doc:supported-ingest-formats) for supported formats. 
     * @summary Ingest file to new layer
     * @param {ManageDatasetApiIngestFileNewLayerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManageDatasetApiGenerated
     */
    public ingestFileNewLayer(requestParameters: ManageDatasetApiIngestFileNewLayerRequest, options?: AxiosRequestConfig) {
        return ManageDatasetApiFp(this.configuration).ingestFileNewLayer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
