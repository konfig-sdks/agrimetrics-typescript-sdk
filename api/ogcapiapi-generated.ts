/* tslint:disable */
/* eslint-disable */
/*
Catalog API

This API lists data sets available on Agrimetrics platform.

The version of the OpenAPI document: 


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { RestError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OGCAPIApi - axios parameter creator
 * @export
 */
export const OGCAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresQuery: async (datasetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('featuresQuery', 'datasetId', datasetId)
            const localVarPath = `/datasets/{datasetId}/ogc/features/v1`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/ogc/features/v1',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresQueryConformance: async (datasetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('featuresQueryConformance', 'datasetId', datasetId)
            const localVarPath = `/datasets/{datasetId}/ogc/features/v1/conformance`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/ogc/features/v1/conformance',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {string} datasetId 
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresQueryOgc: async (datasetId: string, collectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('featuresQueryOgc', 'datasetId', datasetId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('featuresQueryOgc', 'collectionId', collectionId)
            const localVarPath = `/datasets/{datasetId}/ogc/features/v1/collections/{collectionId}`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/ogc/features/v1/collections/{collectionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {string} datasetId 
         * @param {string} collectionId 
         * @param {string} featureId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresQuery_1: async (datasetId: string, collectionId: string, featureId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('featuresQuery_1', 'datasetId', datasetId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('featuresQuery_1', 'collectionId', collectionId)
            // verify required parameter 'featureId' is not null or undefined
            assertParamExists('featuresQuery_1', 'featureId', featureId)
            const localVarPath = `/datasets/{datasetId}/ogc/features/v1/collections/{collectionId}/items/{featureId}`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"featureId"}}`, encodeURIComponent(String(featureId !== undefined ? featureId : `-featureId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/ogc/features/v1/collections/{collectionId}/items/{featureId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {string} datasetId 
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresQueryables: async (datasetId: string, collectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('featuresQueryables', 'datasetId', datasetId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('featuresQueryables', 'collectionId', collectionId)
            const localVarPath = `/datasets/{datasetId}/ogc/features/v1/collections/{collectionId}/queryables`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/ogc/features/v1/collections/{collectionId}/queryables',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CSS files
         * @summary OGC-API CSS
         * @param {string} cssFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyleForCssFile: async (cssFile: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cssFile' is not null or undefined
            assertParamExists('getStyleForCssFile', 'cssFile', cssFile)
            const localVarPath = `/datasets/apicss/{cssFile}`
                .replace(`{${"cssFile"}}`, encodeURIComponent(String(cssFile !== undefined ? cssFile : `-cssFile-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/apicss/{cssFile}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get swagger files
         * @summary OGC-API-Features Swagger
         * @param {string} swaggerFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwaggerFile: async (swaggerFile: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'swaggerFile' is not null or undefined
            assertParamExists('getSwaggerFile', 'swaggerFile', swaggerFile)
            const localVarPath = `/datasets/swagger-ui/{swaggerFile}`
                .replace(`{${"swaggerFile"}}`, encodeURIComponent(String(swaggerFile !== undefined ? swaggerFile : `-swaggerFile-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/swagger-ui/{swaggerFile}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryFeaturesCollection: async (datasetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('queryFeaturesCollection', 'datasetId', datasetId)
            const localVarPath = `/datasets/{datasetId}/ogc/features/v1/collections`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/ogc/features/v1/collections',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {string} datasetId 
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryFeaturesCollectionItems: async (datasetId: string, collectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('queryFeaturesCollectionItems', 'datasetId', datasetId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('queryFeaturesCollectionItems', 'collectionId', collectionId)
            const localVarPath = `/datasets/{datasetId}/ogc/features/v1/collections/{collectionId}/items`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/ogc/features/v1/collections/{collectionId}/items',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryFeaturesFunction: async (datasetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('queryFeaturesFunction', 'datasetId', datasetId)
            const localVarPath = `/datasets/{datasetId}/ogc/features/v1/functions`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/ogc/features/v1/functions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryFeaturesOpenapi: async (datasetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('queryFeaturesOpenapi', 'datasetId', datasetId)
            const localVarPath = `/datasets/{datasetId}/ogc/features/v1/openapi`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/ogc/features/v1/openapi',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OGCAPIApi - functional programming interface
 * @export
 */
export const OGCAPIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OGCAPIApiAxiosParamCreator(configuration)
    return {
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {OGCAPIApiFeaturesQueryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresQuery(requestParameters: OGCAPIApiFeaturesQueryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresQuery(requestParameters.datasetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {OGCAPIApiFeaturesQueryConformanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresQueryConformance(requestParameters: OGCAPIApiFeaturesQueryConformanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresQueryConformance(requestParameters.datasetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {OGCAPIApiFeaturesQueryOgcRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresQueryOgc(requestParameters: OGCAPIApiFeaturesQueryOgcRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresQueryOgc(requestParameters.datasetId, requestParameters.collectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {OGCAPIApiFeaturesQuery0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresQuery_1(requestParameters: OGCAPIApiFeaturesQuery0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresQuery_1(requestParameters.datasetId, requestParameters.collectionId, requestParameters.featureId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {OGCAPIApiFeaturesQueryablesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featuresQueryables(requestParameters: OGCAPIApiFeaturesQueryablesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featuresQueryables(requestParameters.datasetId, requestParameters.collectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get CSS files
         * @summary OGC-API CSS
         * @param {OGCAPIApiGetStyleForCssFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStyleForCssFile(requestParameters: OGCAPIApiGetStyleForCssFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStyleForCssFile(requestParameters.cssFile, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get swagger files
         * @summary OGC-API-Features Swagger
         * @param {OGCAPIApiGetSwaggerFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSwaggerFile(requestParameters: OGCAPIApiGetSwaggerFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSwaggerFile(requestParameters.swaggerFile, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {OGCAPIApiQueryFeaturesCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryFeaturesCollection(requestParameters: OGCAPIApiQueryFeaturesCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryFeaturesCollection(requestParameters.datasetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {OGCAPIApiQueryFeaturesCollectionItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryFeaturesCollectionItems(requestParameters: OGCAPIApiQueryFeaturesCollectionItemsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryFeaturesCollectionItems(requestParameters.datasetId, requestParameters.collectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {OGCAPIApiQueryFeaturesFunctionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryFeaturesFunction(requestParameters: OGCAPIApiQueryFeaturesFunctionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryFeaturesFunction(requestParameters.datasetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {OGCAPIApiQueryFeaturesOpenapiRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryFeaturesOpenapi(requestParameters: OGCAPIApiQueryFeaturesOpenapiRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryFeaturesOpenapi(requestParameters.datasetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OGCAPIApi - factory interface
 * @export
 */
export const OGCAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OGCAPIApiFp(configuration)
    return {
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {OGCAPIApiFeaturesQueryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresQuery(requestParameters: OGCAPIApiFeaturesQueryRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.featuresQuery(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {OGCAPIApiFeaturesQueryConformanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresQueryConformance(requestParameters: OGCAPIApiFeaturesQueryConformanceRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.featuresQueryConformance(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {OGCAPIApiFeaturesQueryOgcRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresQueryOgc(requestParameters: OGCAPIApiFeaturesQueryOgcRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.featuresQueryOgc(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {OGCAPIApiFeaturesQuery0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresQuery_1(requestParameters: OGCAPIApiFeaturesQuery0Request, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.featuresQuery_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {OGCAPIApiFeaturesQueryablesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featuresQueryables(requestParameters: OGCAPIApiFeaturesQueryablesRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.featuresQueryables(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get CSS files
         * @summary OGC-API CSS
         * @param {OGCAPIApiGetStyleForCssFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStyleForCssFile(requestParameters: OGCAPIApiGetStyleForCssFileRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getStyleForCssFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get swagger files
         * @summary OGC-API-Features Swagger
         * @param {OGCAPIApiGetSwaggerFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwaggerFile(requestParameters: OGCAPIApiGetSwaggerFileRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getSwaggerFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {OGCAPIApiQueryFeaturesCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryFeaturesCollection(requestParameters: OGCAPIApiQueryFeaturesCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.queryFeaturesCollection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {OGCAPIApiQueryFeaturesCollectionItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryFeaturesCollectionItems(requestParameters: OGCAPIApiQueryFeaturesCollectionItemsRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.queryFeaturesCollectionItems(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {OGCAPIApiQueryFeaturesFunctionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryFeaturesFunction(requestParameters: OGCAPIApiQueryFeaturesFunctionRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.queryFeaturesFunction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the given data set with the OGC-API Featuresinterface standard 
         * @summary OGC-API-Features query
         * @param {OGCAPIApiQueryFeaturesOpenapiRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryFeaturesOpenapi(requestParameters: OGCAPIApiQueryFeaturesOpenapiRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.queryFeaturesOpenapi(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for featuresQuery operation in OGCAPIApi.
 * @export
 * @interface OGCAPIApiFeaturesQueryRequest
 */
export type OGCAPIApiFeaturesQueryRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OGCAPIApiFeaturesQuery
    */
    readonly datasetId: string
    
}

/**
 * Request parameters for featuresQueryConformance operation in OGCAPIApi.
 * @export
 * @interface OGCAPIApiFeaturesQueryConformanceRequest
 */
export type OGCAPIApiFeaturesQueryConformanceRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OGCAPIApiFeaturesQueryConformance
    */
    readonly datasetId: string
    
}

/**
 * Request parameters for featuresQueryOgc operation in OGCAPIApi.
 * @export
 * @interface OGCAPIApiFeaturesQueryOgcRequest
 */
export type OGCAPIApiFeaturesQueryOgcRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OGCAPIApiFeaturesQueryOgc
    */
    readonly datasetId: string
    
    /**
    * 
    * @type {string}
    * @memberof OGCAPIApiFeaturesQueryOgc
    */
    readonly collectionId: string
    
}

/**
 * Request parameters for featuresQuery_1 operation in OGCAPIApi.
 * @export
 * @interface OGCAPIApiFeaturesQuery0Request
 */
export type OGCAPIApiFeaturesQuery0Request = {
    
    /**
    * 
    * @type {string}
    * @memberof OGCAPIApiFeaturesQuery0
    */
    readonly datasetId: string
    
    /**
    * 
    * @type {string}
    * @memberof OGCAPIApiFeaturesQuery0
    */
    readonly collectionId: string
    
    /**
    * 
    * @type {string}
    * @memberof OGCAPIApiFeaturesQuery0
    */
    readonly featureId: string
    
}

/**
 * Request parameters for featuresQueryables operation in OGCAPIApi.
 * @export
 * @interface OGCAPIApiFeaturesQueryablesRequest
 */
export type OGCAPIApiFeaturesQueryablesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OGCAPIApiFeaturesQueryables
    */
    readonly datasetId: string
    
    /**
    * 
    * @type {string}
    * @memberof OGCAPIApiFeaturesQueryables
    */
    readonly collectionId: string
    
}

/**
 * Request parameters for getStyleForCssFile operation in OGCAPIApi.
 * @export
 * @interface OGCAPIApiGetStyleForCssFileRequest
 */
export type OGCAPIApiGetStyleForCssFileRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OGCAPIApiGetStyleForCssFile
    */
    readonly cssFile: string
    
}

/**
 * Request parameters for getSwaggerFile operation in OGCAPIApi.
 * @export
 * @interface OGCAPIApiGetSwaggerFileRequest
 */
export type OGCAPIApiGetSwaggerFileRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OGCAPIApiGetSwaggerFile
    */
    readonly swaggerFile: string
    
}

/**
 * Request parameters for queryFeaturesCollection operation in OGCAPIApi.
 * @export
 * @interface OGCAPIApiQueryFeaturesCollectionRequest
 */
export type OGCAPIApiQueryFeaturesCollectionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OGCAPIApiQueryFeaturesCollection
    */
    readonly datasetId: string
    
}

/**
 * Request parameters for queryFeaturesCollectionItems operation in OGCAPIApi.
 * @export
 * @interface OGCAPIApiQueryFeaturesCollectionItemsRequest
 */
export type OGCAPIApiQueryFeaturesCollectionItemsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OGCAPIApiQueryFeaturesCollectionItems
    */
    readonly datasetId: string
    
    /**
    * 
    * @type {string}
    * @memberof OGCAPIApiQueryFeaturesCollectionItems
    */
    readonly collectionId: string
    
}

/**
 * Request parameters for queryFeaturesFunction operation in OGCAPIApi.
 * @export
 * @interface OGCAPIApiQueryFeaturesFunctionRequest
 */
export type OGCAPIApiQueryFeaturesFunctionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OGCAPIApiQueryFeaturesFunction
    */
    readonly datasetId: string
    
}

/**
 * Request parameters for queryFeaturesOpenapi operation in OGCAPIApi.
 * @export
 * @interface OGCAPIApiQueryFeaturesOpenapiRequest
 */
export type OGCAPIApiQueryFeaturesOpenapiRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OGCAPIApiQueryFeaturesOpenapi
    */
    readonly datasetId: string
    
}

/**
 * OGCAPIApiGenerated - object-oriented interface
 * @export
 * @class OGCAPIApiGenerated
 * @extends {BaseAPI}
 */
export class OGCAPIApiGenerated extends BaseAPI {
    /**
     * Query the given data set with the OGC-API Featuresinterface standard 
     * @summary OGC-API-Features query
     * @param {OGCAPIApiFeaturesQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OGCAPIApiGenerated
     */
    public featuresQuery(requestParameters: OGCAPIApiFeaturesQueryRequest, options?: AxiosRequestConfig) {
        return OGCAPIApiFp(this.configuration).featuresQuery(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the given data set with the OGC-API Featuresinterface standard 
     * @summary OGC-API-Features query
     * @param {OGCAPIApiFeaturesQueryConformanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OGCAPIApiGenerated
     */
    public featuresQueryConformance(requestParameters: OGCAPIApiFeaturesQueryConformanceRequest, options?: AxiosRequestConfig) {
        return OGCAPIApiFp(this.configuration).featuresQueryConformance(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the given data set with the OGC-API Featuresinterface standard 
     * @summary OGC-API-Features query
     * @param {OGCAPIApiFeaturesQueryOgcRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OGCAPIApiGenerated
     */
    public featuresQueryOgc(requestParameters: OGCAPIApiFeaturesQueryOgcRequest, options?: AxiosRequestConfig) {
        return OGCAPIApiFp(this.configuration).featuresQueryOgc(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the given data set with the OGC-API Featuresinterface standard 
     * @summary OGC-API-Features query
     * @param {OGCAPIApiFeaturesQuery0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OGCAPIApiGenerated
     */
    public featuresQuery_1(requestParameters: OGCAPIApiFeaturesQuery0Request, options?: AxiosRequestConfig) {
        return OGCAPIApiFp(this.configuration).featuresQuery_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the given data set with the OGC-API Featuresinterface standard 
     * @summary OGC-API-Features query
     * @param {OGCAPIApiFeaturesQueryablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OGCAPIApiGenerated
     */
    public featuresQueryables(requestParameters: OGCAPIApiFeaturesQueryablesRequest, options?: AxiosRequestConfig) {
        return OGCAPIApiFp(this.configuration).featuresQueryables(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get CSS files
     * @summary OGC-API CSS
     * @param {OGCAPIApiGetStyleForCssFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OGCAPIApiGenerated
     */
    public getStyleForCssFile(requestParameters: OGCAPIApiGetStyleForCssFileRequest, options?: AxiosRequestConfig) {
        return OGCAPIApiFp(this.configuration).getStyleForCssFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get swagger files
     * @summary OGC-API-Features Swagger
     * @param {OGCAPIApiGetSwaggerFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OGCAPIApiGenerated
     */
    public getSwaggerFile(requestParameters: OGCAPIApiGetSwaggerFileRequest, options?: AxiosRequestConfig) {
        return OGCAPIApiFp(this.configuration).getSwaggerFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the given data set with the OGC-API Featuresinterface standard 
     * @summary OGC-API-Features query
     * @param {OGCAPIApiQueryFeaturesCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OGCAPIApiGenerated
     */
    public queryFeaturesCollection(requestParameters: OGCAPIApiQueryFeaturesCollectionRequest, options?: AxiosRequestConfig) {
        return OGCAPIApiFp(this.configuration).queryFeaturesCollection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the given data set with the OGC-API Featuresinterface standard 
     * @summary OGC-API-Features query
     * @param {OGCAPIApiQueryFeaturesCollectionItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OGCAPIApiGenerated
     */
    public queryFeaturesCollectionItems(requestParameters: OGCAPIApiQueryFeaturesCollectionItemsRequest, options?: AxiosRequestConfig) {
        return OGCAPIApiFp(this.configuration).queryFeaturesCollectionItems(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the given data set with the OGC-API Featuresinterface standard 
     * @summary OGC-API-Features query
     * @param {OGCAPIApiQueryFeaturesFunctionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OGCAPIApiGenerated
     */
    public queryFeaturesFunction(requestParameters: OGCAPIApiQueryFeaturesFunctionRequest, options?: AxiosRequestConfig) {
        return OGCAPIApiFp(this.configuration).queryFeaturesFunction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the given data set with the OGC-API Featuresinterface standard 
     * @summary OGC-API-Features query
     * @param {OGCAPIApiQueryFeaturesOpenapiRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OGCAPIApiGenerated
     */
    public queryFeaturesOpenapi(requestParameters: OGCAPIApiQueryFeaturesOpenapiRequest, options?: AxiosRequestConfig) {
        return OGCAPIApiFp(this.configuration).queryFeaturesOpenapi(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
