/* tslint:disable */
/* eslint-disable */
/*
Catalog API

This API lists data sets available on Agrimetrics platform.

The version of the OpenAPI document: 


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BatchIdentityInputEntitlementsInner } from '../models';
// @ts-ignore
import { DataSetPatch } from '../models';
// @ts-ignore
import { DataSetTemplateEntity } from '../models';
// @ts-ignore
import { DataSetTemplateMetadata } from '../models';
// @ts-ignore
import { DataSetTemplatePatchMetadata } from '../models';
// @ts-ignore
import { Entitlements } from '../models';
// @ts-ignore
import { EntryUpdateResponse } from '../models';
// @ts-ignore
import { Exchange } from '../models';
// @ts-ignore
import { TemplateListPermissionsToViewResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TemplateApi - axios parameter creator
 * @export
 */
export const TemplateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a single template that can be used to create similar catalogue entries.
         * @summary Create a new template for creating catalogue entries.
         * @param {DataSetTemplateMetadata} [dataSetTemplateMetadata] The data set to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCatalogEntry: async (dataSetTemplateMetadata?: DataSetTemplateMetadata, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: dataSetTemplateMetadata,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/templates',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(dataSetTemplateMetadata, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a specific template
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecificTemplate: async (templateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('deleteSpecificTemplate', 'templateId', templateId)
            const localVarPath = `/templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId !== undefined ? templateId : `-templateId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/templates/{templateId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific template
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificTemplate: async (templateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('getSpecificTemplate', 'templateId', templateId)
            const localVarPath = `/templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId !== undefined ? templateId : `-templateId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/templates/{templateId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all templates you have permission to view.
         * @summary List all templates you have permission to view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPermissionsToView: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/templates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a template
         * @param {string} templateId 
         * @param {DataSetTemplateMetadata} [dataSetTemplateMetadata] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplateItem: async (templateId: string, dataSetTemplateMetadata?: DataSetTemplateMetadata, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('updateTemplateItem', 'templateId', templateId)
            const localVarPath = `/templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId !== undefined ? templateId : `-templateId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: dataSetTemplateMetadata,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/templates/{templateId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(dataSetTemplateMetadata, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a template
         * @param {string} templateId 
         * @param {DataSetTemplatePatchMetadata} [dataSetTemplatePatchMetadata] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplateItem_1: async (templateId: string, dataSetTemplatePatchMetadata?: DataSetTemplatePatchMetadata, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('updateTemplateItem_1', 'templateId', templateId)
            const localVarPath = `/templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId !== undefined ? templateId : `-templateId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: dataSetTemplatePatchMetadata,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/templates/{templateId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(dataSetTemplatePatchMetadata, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplateApi - functional programming interface
 * @export
 */
export const TemplateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TemplateApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a single template that can be used to create similar catalogue entries.
         * @summary Create a new template for creating catalogue entries.
         * @param {TemplateApiCreateCatalogEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCatalogEntry(requestParameters: TemplateApiCreateCatalogEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntryUpdateResponse>> {
            const dataSetTemplateMetadata: DataSetTemplateMetadata = {
                description: requestParameters.description,
                name: requestParameters.name,
                dataSet: requestParameters.dataSet,
                entitlements: requestParameters.entitlements,
                creatorEntitlements: requestParameters.creatorEntitlements,
                exchange: requestParameters.exchange
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCatalogEntry(dataSetTemplateMetadata, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a specific template
         * @param {TemplateApiDeleteSpecificTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSpecificTemplate(requestParameters: TemplateApiDeleteSpecificTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntryUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSpecificTemplate(requestParameters.templateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a specific template
         * @param {TemplateApiGetSpecificTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecificTemplate(requestParameters: TemplateApiGetSpecificTemplateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataSetTemplateEntity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecificTemplate(requestParameters.templateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all templates you have permission to view.
         * @summary List all templates you have permission to view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPermissionsToView(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplateListPermissionsToViewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPermissionsToView(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a template
         * @param {TemplateApiUpdateTemplateItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTemplateItem(requestParameters: TemplateApiUpdateTemplateItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataSetTemplateEntity>> {
            const dataSetTemplateMetadata: DataSetTemplateMetadata = {
                description: requestParameters.description,
                name: requestParameters.name,
                dataSet: requestParameters.dataSet,
                entitlements: requestParameters.entitlements,
                creatorEntitlements: requestParameters.creatorEntitlements,
                exchange: requestParameters.exchange
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTemplateItem(requestParameters.templateId, dataSetTemplateMetadata, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a template
         * @param {TemplateApiUpdateTemplateItem0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTemplateItem_1(requestParameters: TemplateApiUpdateTemplateItem0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataSetTemplateEntity>> {
            const dataSetTemplatePatchMetadata: DataSetTemplatePatchMetadata = {
                description: requestParameters.description,
                name: requestParameters.name,
                dataSet: requestParameters.dataSet,
                entitlements: requestParameters.entitlements,
                creatorEntitlements: requestParameters.creatorEntitlements
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTemplateItem_1(requestParameters.templateId, dataSetTemplatePatchMetadata, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TemplateApi - factory interface
 * @export
 */
export const TemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TemplateApiFp(configuration)
    return {
        /**
         * Creates a single template that can be used to create similar catalogue entries.
         * @summary Create a new template for creating catalogue entries.
         * @param {TemplateApiCreateCatalogEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCatalogEntry(requestParameters: TemplateApiCreateCatalogEntryRequest, options?: AxiosRequestConfig): AxiosPromise<EntryUpdateResponse> {
            return localVarFp.createCatalogEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a specific template
         * @param {TemplateApiDeleteSpecificTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecificTemplate(requestParameters: TemplateApiDeleteSpecificTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<EntryUpdateResponse> {
            return localVarFp.deleteSpecificTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific template
         * @param {TemplateApiGetSpecificTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecificTemplate(requestParameters: TemplateApiGetSpecificTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<DataSetTemplateEntity> {
            return localVarFp.getSpecificTemplate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all templates you have permission to view.
         * @summary List all templates you have permission to view.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPermissionsToView(options?: AxiosRequestConfig): AxiosPromise<TemplateListPermissionsToViewResponse> {
            return localVarFp.listPermissionsToView(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a template
         * @param {TemplateApiUpdateTemplateItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplateItem(requestParameters: TemplateApiUpdateTemplateItemRequest, options?: AxiosRequestConfig): AxiosPromise<DataSetTemplateEntity> {
            return localVarFp.updateTemplateItem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a template
         * @param {TemplateApiUpdateTemplateItem0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplateItem_1(requestParameters: TemplateApiUpdateTemplateItem0Request, options?: AxiosRequestConfig): AxiosPromise<DataSetTemplateEntity> {
            return localVarFp.updateTemplateItem_1(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCatalogEntry operation in TemplateApi.
 * @export
 * @interface TemplateApiCreateCatalogEntryRequest
 */
export type TemplateApiCreateCatalogEntryRequest = {
    
} & DataSetTemplateMetadata

/**
 * Request parameters for deleteSpecificTemplate operation in TemplateApi.
 * @export
 * @interface TemplateApiDeleteSpecificTemplateRequest
 */
export type TemplateApiDeleteSpecificTemplateRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TemplateApiDeleteSpecificTemplate
    */
    readonly templateId: string
    
}

/**
 * Request parameters for getSpecificTemplate operation in TemplateApi.
 * @export
 * @interface TemplateApiGetSpecificTemplateRequest
 */
export type TemplateApiGetSpecificTemplateRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TemplateApiGetSpecificTemplate
    */
    readonly templateId: string
    
}

/**
 * Request parameters for updateTemplateItem operation in TemplateApi.
 * @export
 * @interface TemplateApiUpdateTemplateItemRequest
 */
export type TemplateApiUpdateTemplateItemRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof TemplateApiUpdateTemplateItem
    */
    readonly templateId: string
    
} & DataSetTemplateMetadata

/**
 * Request parameters for updateTemplateItem_1 operation in TemplateApi.
 * @export
 * @interface TemplateApiUpdateTemplateItem0Request
 */
export type TemplateApiUpdateTemplateItem0Request = {
    
    /**
    * 
    * @type {string}
    * @memberof TemplateApiUpdateTemplateItem0
    */
    readonly templateId: string
    
} & DataSetTemplatePatchMetadata

/**
 * TemplateApiGenerated - object-oriented interface
 * @export
 * @class TemplateApiGenerated
 * @extends {BaseAPI}
 */
export class TemplateApiGenerated extends BaseAPI {
    /**
     * Creates a single template that can be used to create similar catalogue entries.
     * @summary Create a new template for creating catalogue entries.
     * @param {TemplateApiCreateCatalogEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApiGenerated
     */
    public createCatalogEntry(requestParameters: TemplateApiCreateCatalogEntryRequest, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).createCatalogEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a specific template
     * @param {TemplateApiDeleteSpecificTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApiGenerated
     */
    public deleteSpecificTemplate(requestParameters: TemplateApiDeleteSpecificTemplateRequest, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).deleteSpecificTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific template
     * @param {TemplateApiGetSpecificTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApiGenerated
     */
    public getSpecificTemplate(requestParameters: TemplateApiGetSpecificTemplateRequest, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).getSpecificTemplate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all templates you have permission to view.
     * @summary List all templates you have permission to view.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApiGenerated
     */
    public listPermissionsToView(options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).listPermissionsToView(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a template
     * @param {TemplateApiUpdateTemplateItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApiGenerated
     */
    public updateTemplateItem(requestParameters: TemplateApiUpdateTemplateItemRequest, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).updateTemplateItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a template
     * @param {TemplateApiUpdateTemplateItem0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApiGenerated
     */
    public updateTemplateItem_1(requestParameters: TemplateApiUpdateTemplateItem0Request, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).updateTemplateItem_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
