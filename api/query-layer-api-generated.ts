/* tslint:disable */
/* eslint-disable */
/*
Catalog API

This API lists data sets available on Agrimetrics platform.

The version of the OpenAPI document: 


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CostSummary } from '../models';
// @ts-ignore
import { GeneralGeometry } from '../models';
// @ts-ignore
import { GeoJSONPoint } from '../models';
// @ts-ignore
import { GeoJSONPolygon } from '../models';
// @ts-ignore
import { OutputFormats } from '../models';
// @ts-ignore
import { QueryLayerCalculateCostRequest } from '../models';
// @ts-ignore
import { QueryLayerCalculateStatisticsWithinGeometryRequest } from '../models';
// @ts-ignore
import { QueryLayerCutShapeBoundaryAndRetrieve403Response } from '../models';
// @ts-ignore
import { QueryLayerCutShapeBoundaryAndRetrieve404Response } from '../models';
// @ts-ignore
import { QueryLayerCutShapeBoundaryAndRetrieve406Response } from '../models';
// @ts-ignore
import { QueryLayerMetadataResponse } from '../models';
// @ts-ignore
import { QueryLayerSearchGeometryRequest } from '../models';
// @ts-ignore
import { RestError } from '../models';
// @ts-ignore
import { Statistics } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * QueryLayerApi - axios parameter creator
 * @export
 */
export const QueryLayerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Find out the cost of searching a specific geometry within a layer. 
         * @summary Calculate query cost
         * @param {string} layerId 
         * @param {QueryLayerCalculateCostRequest} queryLayerCalculateCostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateCost: async (layerId: string, queryLayerCalculateCostRequest: QueryLayerCalculateCostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerId' is not null or undefined
            assertParamExists('calculateCost', 'layerId', layerId)
            // verify required parameter 'queryLayerCalculateCostRequest' is not null or undefined
            assertParamExists('calculateCost', 'queryLayerCalculateCostRequest', queryLayerCalculateCostRequest)
            const localVarPath = `/layers/{layerId}/search/cost`
                .replace(`{${"layerId"}}`, encodeURIComponent(String(layerId !== undefined ? layerId : `-layerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: queryLayerCalculateCostRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/layers/{layerId}/search/cost',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(queryLayerCalculateCostRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * > :warning: Search geometries are currently limited to areas up to 500 square km.  Calculates basic statistics of the raster layer within the specified geometry (and optionally time). 
         * @summary Get layer statistics
         * @param {string} layerId 
         * @param {QueryLayerCalculateStatisticsWithinGeometryRequest} queryLayerCalculateStatisticsWithinGeometryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateStatisticsWithinGeometry: async (layerId: string, queryLayerCalculateStatisticsWithinGeometryRequest: QueryLayerCalculateStatisticsWithinGeometryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerId' is not null or undefined
            assertParamExists('calculateStatisticsWithinGeometry', 'layerId', layerId)
            // verify required parameter 'queryLayerCalculateStatisticsWithinGeometryRequest' is not null or undefined
            assertParamExists('calculateStatisticsWithinGeometry', 'queryLayerCalculateStatisticsWithinGeometryRequest', queryLayerCalculateStatisticsWithinGeometryRequest)
            const localVarPath = `/layers/{layerId}/search/statistics`
                .replace(`{${"layerId"}}`, encodeURIComponent(String(layerId !== undefined ? layerId : `-layerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: queryLayerCalculateStatisticsWithinGeometryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/layers/{layerId}/search/statistics',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(queryLayerCalculateStatisticsWithinGeometryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cut one or more layers to a shape boundary and retrieve the features as multiple layers in a single downloadable file
         * @summary Query and download sections of one or more layers
         * @param {Array<string>} layer A layer to query
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cutShapeBoundaryAndRetrieve: async (layer: Array<string>, body?: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layer' is not null or undefined
            assertParamExists('cutShapeBoundaryAndRetrieve', 'layer', layer)
            const localVarPath = `/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (layer) {
                localVarQueryParameter['layer'] = layer;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/query',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the metadata for a given layer, including the geospatial extent. 
         * @summary Get layer metadata
         * @param {string} layerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadata: async (layerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerId' is not null or undefined
            assertParamExists('metadata', 'layerId', layerId)
            const localVarPath = `/layers/{layerId}`
                .replace(`{${"layerId"}}`, encodeURIComponent(String(layerId !== undefined ? layerId : `-layerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/layers/{layerId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * > :warning: Search geometries are currently limited to areas up to 500 square km.  Search a specific geometry within a layer. You can optionally specify a time range and/or choose the format of the response (file type, or json). 
         * @summary Search within layer
         * @param {string} layerId 
         * @param {QueryLayerSearchGeometryRequest} queryLayerSearchGeometryRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGeometry: async (layerId: string, queryLayerSearchGeometryRequest: QueryLayerSearchGeometryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerId' is not null or undefined
            assertParamExists('searchGeometry', 'layerId', layerId)
            // verify required parameter 'queryLayerSearchGeometryRequest' is not null or undefined
            assertParamExists('searchGeometry', 'queryLayerSearchGeometryRequest', queryLayerSearchGeometryRequest)
            const localVarPath = `/layers/{layerId}/search`
                .replace(`{${"layerId"}}`, encodeURIComponent(String(layerId !== undefined ? layerId : `-layerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: queryLayerSearchGeometryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/layers/{layerId}/search',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(queryLayerSearchGeometryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QueryLayerApi - functional programming interface
 * @export
 */
export const QueryLayerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QueryLayerApiAxiosParamCreator(configuration)
    return {
        /**
         * Find out the cost of searching a specific geometry within a layer. 
         * @summary Calculate query cost
         * @param {QueryLayerApiCalculateCostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calculateCost(requestParameters: QueryLayerApiCalculateCostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CostSummary>> {
            const queryLayerCalculateCostRequest: QueryLayerCalculateCostRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.calculateCost(requestParameters.layerId, queryLayerCalculateCostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * > :warning: Search geometries are currently limited to areas up to 500 square km.  Calculates basic statistics of the raster layer within the specified geometry (and optionally time). 
         * @summary Get layer statistics
         * @param {QueryLayerApiCalculateStatisticsWithinGeometryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calculateStatisticsWithinGeometry(requestParameters: QueryLayerApiCalculateStatisticsWithinGeometryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Statistics>> {
            const queryLayerCalculateStatisticsWithinGeometryRequest: QueryLayerCalculateStatisticsWithinGeometryRequest = {
                geometry: requestParameters.geometry,
                time: requestParameters.time
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.calculateStatisticsWithinGeometry(requestParameters.layerId, queryLayerCalculateStatisticsWithinGeometryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Cut one or more layers to a shape boundary and retrieve the features as multiple layers in a single downloadable file
         * @summary Query and download sections of one or more layers
         * @param {QueryLayerApiCutShapeBoundaryAndRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cutShapeBoundaryAndRetrieve(requestParameters: QueryLayerApiCutShapeBoundaryAndRetrieveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const body: object = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.cutShapeBoundaryAndRetrieve(requestParameters.layer, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the metadata for a given layer, including the geospatial extent. 
         * @summary Get layer metadata
         * @param {QueryLayerApiMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async metadata(requestParameters: QueryLayerApiMetadataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryLayerMetadataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.metadata(requestParameters.layerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * > :warning: Search geometries are currently limited to areas up to 500 square km.  Search a specific geometry within a layer. You can optionally specify a time range and/or choose the format of the response (file type, or json). 
         * @summary Search within layer
         * @param {QueryLayerApiSearchGeometryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchGeometry(requestParameters: QueryLayerApiSearchGeometryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Uint8Array | File | buffer.File>> {
            const queryLayerSearchGeometryRequest: QueryLayerSearchGeometryRequest = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchGeometry(requestParameters.layerId, queryLayerSearchGeometryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QueryLayerApi - factory interface
 * @export
 */
export const QueryLayerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QueryLayerApiFp(configuration)
    return {
        /**
         * Find out the cost of searching a specific geometry within a layer. 
         * @summary Calculate query cost
         * @param {QueryLayerApiCalculateCostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateCost(requestParameters: QueryLayerApiCalculateCostRequest, options?: AxiosRequestConfig): AxiosPromise<CostSummary> {
            return localVarFp.calculateCost(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * > :warning: Search geometries are currently limited to areas up to 500 square km.  Calculates basic statistics of the raster layer within the specified geometry (and optionally time). 
         * @summary Get layer statistics
         * @param {QueryLayerApiCalculateStatisticsWithinGeometryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculateStatisticsWithinGeometry(requestParameters: QueryLayerApiCalculateStatisticsWithinGeometryRequest, options?: AxiosRequestConfig): AxiosPromise<Statistics> {
            return localVarFp.calculateStatisticsWithinGeometry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Cut one or more layers to a shape boundary and retrieve the features as multiple layers in a single downloadable file
         * @summary Query and download sections of one or more layers
         * @param {QueryLayerApiCutShapeBoundaryAndRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cutShapeBoundaryAndRetrieve(requestParameters: QueryLayerApiCutShapeBoundaryAndRetrieveRequest, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.cutShapeBoundaryAndRetrieve(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the metadata for a given layer, including the geospatial extent. 
         * @summary Get layer metadata
         * @param {QueryLayerApiMetadataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        metadata(requestParameters: QueryLayerApiMetadataRequest, options?: AxiosRequestConfig): AxiosPromise<QueryLayerMetadataResponse> {
            return localVarFp.metadata(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * > :warning: Search geometries are currently limited to areas up to 500 square km.  Search a specific geometry within a layer. You can optionally specify a time range and/or choose the format of the response (file type, or json). 
         * @summary Search within layer
         * @param {QueryLayerApiSearchGeometryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGeometry(requestParameters: QueryLayerApiSearchGeometryRequest, options?: AxiosRequestConfig): AxiosPromise<Uint8Array | File | buffer.File> {
            return localVarFp.searchGeometry(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for calculateCost operation in QueryLayerApi.
 * @export
 * @interface QueryLayerApiCalculateCostRequest
 */
export type QueryLayerApiCalculateCostRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof QueryLayerApiCalculateCost
    */
    readonly layerId: string
    
} & QueryLayerCalculateCostRequest

/**
 * Request parameters for calculateStatisticsWithinGeometry operation in QueryLayerApi.
 * @export
 * @interface QueryLayerApiCalculateStatisticsWithinGeometryRequest
 */
export type QueryLayerApiCalculateStatisticsWithinGeometryRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof QueryLayerApiCalculateStatisticsWithinGeometry
    */
    readonly layerId: string
    
} & QueryLayerCalculateStatisticsWithinGeometryRequest

/**
 * Request parameters for cutShapeBoundaryAndRetrieve operation in QueryLayerApi.
 * @export
 * @interface QueryLayerApiCutShapeBoundaryAndRetrieveRequest
 */
export type QueryLayerApiCutShapeBoundaryAndRetrieveRequest = {
    
    /**
    * A layer to query
    * @type {Array<string>}
    * @memberof QueryLayerApiCutShapeBoundaryAndRetrieve
    */
    readonly layer: Array<string>
    
} & object

/**
 * Request parameters for metadata operation in QueryLayerApi.
 * @export
 * @interface QueryLayerApiMetadataRequest
 */
export type QueryLayerApiMetadataRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof QueryLayerApiMetadata
    */
    readonly layerId: string
    
}

/**
 * Request parameters for searchGeometry operation in QueryLayerApi.
 * @export
 * @interface QueryLayerApiSearchGeometryRequest
 */
export type QueryLayerApiSearchGeometryRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof QueryLayerApiSearchGeometry
    */
    readonly layerId: string
    
} & QueryLayerSearchGeometryRequest

/**
 * QueryLayerApiGenerated - object-oriented interface
 * @export
 * @class QueryLayerApiGenerated
 * @extends {BaseAPI}
 */
export class QueryLayerApiGenerated extends BaseAPI {
    /**
     * Find out the cost of searching a specific geometry within a layer. 
     * @summary Calculate query cost
     * @param {QueryLayerApiCalculateCostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLayerApiGenerated
     */
    public calculateCost(requestParameters: QueryLayerApiCalculateCostRequest, options?: AxiosRequestConfig) {
        return QueryLayerApiFp(this.configuration).calculateCost(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * > :warning: Search geometries are currently limited to areas up to 500 square km.  Calculates basic statistics of the raster layer within the specified geometry (and optionally time). 
     * @summary Get layer statistics
     * @param {QueryLayerApiCalculateStatisticsWithinGeometryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLayerApiGenerated
     */
    public calculateStatisticsWithinGeometry(requestParameters: QueryLayerApiCalculateStatisticsWithinGeometryRequest, options?: AxiosRequestConfig) {
        return QueryLayerApiFp(this.configuration).calculateStatisticsWithinGeometry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cut one or more layers to a shape boundary and retrieve the features as multiple layers in a single downloadable file
     * @summary Query and download sections of one or more layers
     * @param {QueryLayerApiCutShapeBoundaryAndRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLayerApiGenerated
     */
    public cutShapeBoundaryAndRetrieve(requestParameters: QueryLayerApiCutShapeBoundaryAndRetrieveRequest, options?: AxiosRequestConfig) {
        return QueryLayerApiFp(this.configuration).cutShapeBoundaryAndRetrieve(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the metadata for a given layer, including the geospatial extent. 
     * @summary Get layer metadata
     * @param {QueryLayerApiMetadataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLayerApiGenerated
     */
    public metadata(requestParameters: QueryLayerApiMetadataRequest, options?: AxiosRequestConfig) {
        return QueryLayerApiFp(this.configuration).metadata(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * > :warning: Search geometries are currently limited to areas up to 500 square km.  Search a specific geometry within a layer. You can optionally specify a time range and/or choose the format of the response (file type, or json). 
     * @summary Search within layer
     * @param {QueryLayerApiSearchGeometryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryLayerApiGenerated
     */
    public searchGeometry(requestParameters: QueryLayerApiSearchGeometryRequest, options?: AxiosRequestConfig) {
        return QueryLayerApiFp(this.configuration).searchGeometry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
