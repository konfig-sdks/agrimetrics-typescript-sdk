/* tslint:disable */
/* eslint-disable */
/*
Catalog API

This API lists data sets available on Agrimetrics platform.

The version of the OpenAPI document: 


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Billable } from '../models';
// @ts-ignore
import { ManageDatasetIngestFileNewLayerRequest } from '../models';
// @ts-ignore
import { ManageLayerIngestFileRequest } from '../models';
// @ts-ignore
import { NewLayers } from '../models';
// @ts-ignore
import { RestError } from '../models';
// @ts-ignore
import { ServiceDefinition } from '../models';
// @ts-ignore
import { ServiceDefinitionResponse } from '../models';
// @ts-ignore
import { ServiceDefinitionUpdateExistingDefinitionRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Create new service definition within a data set. 
         * @summary Create new service definition
         * @param {ServiceDefinition} serviceDefinition 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDefinition: async (serviceDefinition: ServiceDefinition, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceDefinition' is not null or undefined
            assertParamExists('createNewDefinition', 'serviceDefinition', serviceDefinition)
            const localVarPath = `/serviceDefinition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: serviceDefinition,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/serviceDefinition',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(serviceDefinition, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Delete service definition given layer ID 
         * @summary Delete service definition
         * @param {string} layerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (layerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerId' is not null or undefined
            assertParamExists('deleteById', 'layerId', layerId)
            const localVarPath = `/serviceDefinition/{layerId}`
                .replace(`{${"layerId"}}`, encodeURIComponent(String(layerId !== undefined ? layerId : `-layerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/serviceDefinition/{layerId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Delete the datastore and layer relating to a zip file on a data set. 
         * @summary Delete layer
         * @param {string} layerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLayer: async (layerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerId' is not null or undefined
            assertParamExists('deleteLayer', 'layerId', layerId)
            const localVarPath = `/layers/{layerId}`
                .replace(`{${"layerId"}}`, encodeURIComponent(String(layerId !== undefined ? layerId : `-layerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/layers/{layerId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Get the service definition for a given layer ID 
         * @summary Get service definition
         * @param {string} layerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByLayerId: async (layerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerId' is not null or undefined
            assertParamExists('getByLayerId', 'layerId', layerId)
            const localVarPath = `/serviceDefinition/{layerId}`
                .replace(`{${"layerId"}}`, encodeURIComponent(String(layerId !== undefined ? layerId : `-layerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/serviceDefinition/{layerId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Ingest a file that has been uploaded to a data set. 
         * @summary Ingest a file to a layer
         * @param {string} layerId 
         * @param {ManageLayerIngestFileRequest} manageLayerIngestFileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ingestFile: async (layerId: string, manageLayerIngestFileRequest: ManageLayerIngestFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerId' is not null or undefined
            assertParamExists('ingestFile', 'layerId', layerId)
            // verify required parameter 'manageLayerIngestFileRequest' is not null or undefined
            assertParamExists('ingestFile', 'manageLayerIngestFileRequest', manageLayerIngestFileRequest)
            const localVarPath = `/layers/{layerId}/ingest`
                .replace(`{${"layerId"}}`, encodeURIComponent(String(layerId !== undefined ? layerId : `-layerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: manageLayerIngestFileRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/layers/{layerId}/ingest',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(manageLayerIngestFileRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Ingest a file that has been uploaded to the catalog to create a new layer. See [supported ingest formats](doc:supported-ingest-formats) for supported formats. 
         * @summary Ingest file to new layer
         * @param {string} datasetId 
         * @param {ManageDatasetIngestFileNewLayerRequest} manageDatasetIngestFileNewLayerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ingestFileNewLayer: async (datasetId: string, manageDatasetIngestFileNewLayerRequest: ManageDatasetIngestFileNewLayerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('ingestFileNewLayer', 'datasetId', datasetId)
            // verify required parameter 'manageDatasetIngestFileNewLayerRequest' is not null or undefined
            assertParamExists('ingestFileNewLayer', 'manageDatasetIngestFileNewLayerRequest', manageDatasetIngestFileNewLayerRequest)
            const localVarPath = `/datasets/{datasetId}/layers`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: manageDatasetIngestFileNewLayerRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/layers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(manageDatasetIngestFileNewLayerRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Remove a file from a layer. When you are deleting a file from a layer, the layer may remain if any other files were ingested onto the same layer. If removing a raster file, provide the fileName query parameter; if removing a vector file, provide the fileUri. 
         * @summary Delete a file from a layer
         * @param {string} layerId 
         * @param {string} [fileUri] 
         * @param {string} [filename] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFile: async (layerId: string, fileUri?: string, filename?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerId' is not null or undefined
            assertParamExists('removeFile', 'layerId', layerId)
            const localVarPath = `/layers/{layerId}/files`
                .replace(`{${"layerId"}}`, encodeURIComponent(String(layerId !== undefined ? layerId : `-layerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            if (fileUri !== undefined) {
                localVarQueryParameter['fileUri'] = fileUri;
            }

            if (filename !== undefined) {
                localVarQueryParameter['filename'] = filename;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/layers/{layerId}/files',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Update an existing service definition with billing and coordinates reference system metadata. 
         * @summary Update service definition
         * @param {string} layerId 
         * @param {ServiceDefinitionUpdateExistingDefinitionRequest} [serviceDefinitionUpdateExistingDefinitionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExistingDefinition: async (layerId: string, serviceDefinitionUpdateExistingDefinitionRequest?: ServiceDefinitionUpdateExistingDefinitionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerId' is not null or undefined
            assertParamExists('updateExistingDefinition', 'layerId', layerId)
            const localVarPath = `/serviceDefinition/{layerId}`
                .replace(`{${"layerId"}}`, encodeURIComponent(String(layerId !== undefined ? layerId : `-layerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: serviceDefinitionUpdateExistingDefinitionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/serviceDefinition/{layerId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(serviceDefinitionUpdateExistingDefinitionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Create new service definition within a data set. 
         * @summary Create new service definition
         * @param {AdminApiCreateNewDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewDefinition(requestParameters: AdminApiCreateNewDefinitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDefinitionResponse>> {
            const serviceDefinition: ServiceDefinition = {
                datasetId: requestParameters.datasetId,
                layerName: requestParameters.layerName,
                service: requestParameters.service,
                WFS: requestParameters.WFS,
                WCS: requestParameters.WCS,
                WMS: requestParameters.WMS,
                WMTS: requestParameters.WMTS,
                OGCApiFeatures: requestParameters.OGCApiFeatures,
                OGCApiTiles: requestParameters.OGCApiTiles,
                temporal: requestParameters.temporal,
                datastore: requestParameters.datastore,
                geoserverHostName: requestParameters.geoserverHostName,
                geometryField: requestParameters.geometryField,
                billable: requestParameters.billable,
                defaultEPSGCode: requestParameters.defaultEPSGCode
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewDefinition(serviceDefinition, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Delete service definition given layer ID 
         * @summary Delete service definition
         * @param {AdminApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: AdminApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.layerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Delete the datastore and layer relating to a zip file on a data set. 
         * @summary Delete layer
         * @param {AdminApiDeleteLayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLayer(requestParameters: AdminApiDeleteLayerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLayer(requestParameters.layerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Get the service definition for a given layer ID 
         * @summary Get service definition
         * @param {AdminApiGetByLayerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByLayerId(requestParameters: AdminApiGetByLayerIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDefinitionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByLayerId(requestParameters.layerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Ingest a file that has been uploaded to a data set. 
         * @summary Ingest a file to a layer
         * @param {AdminApiIngestFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ingestFile(requestParameters: AdminApiIngestFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const manageLayerIngestFileRequest: ManageLayerIngestFileRequest = {
                fileId: requestParameters.fileId,
                fileName: requestParameters.fileName,
                datetime: requestParameters.datetime
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.ingestFile(requestParameters.layerId, manageLayerIngestFileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Ingest a file that has been uploaded to the catalog to create a new layer. See [supported ingest formats](doc:supported-ingest-formats) for supported formats. 
         * @summary Ingest file to new layer
         * @param {AdminApiIngestFileNewLayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ingestFileNewLayer(requestParameters: AdminApiIngestFileNewLayerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewLayers>> {
            const manageDatasetIngestFileNewLayerRequest: ManageDatasetIngestFileNewLayerRequest = {
                fileUri: requestParameters.fileUri
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.ingestFileNewLayer(requestParameters.datasetId, manageDatasetIngestFileNewLayerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Remove a file from a layer. When you are deleting a file from a layer, the layer may remain if any other files were ingested onto the same layer. If removing a raster file, provide the fileName query parameter; if removing a vector file, provide the fileUri. 
         * @summary Delete a file from a layer
         * @param {AdminApiRemoveFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFile(requestParameters: AdminApiRemoveFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFile(requestParameters.layerId, requestParameters.fileUri, requestParameters.filename, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Update an existing service definition with billing and coordinates reference system metadata. 
         * @summary Update service definition
         * @param {AdminApiUpdateExistingDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExistingDefinition(requestParameters: AdminApiUpdateExistingDefinitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDefinitionResponse>> {
            const serviceDefinitionUpdateExistingDefinitionRequest: ServiceDefinitionUpdateExistingDefinitionRequest = {
                billable: requestParameters.billable,
                defaultEPSGCode: requestParameters.defaultEPSGCode
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExistingDefinition(requestParameters.layerId, serviceDefinitionUpdateExistingDefinitionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Create new service definition within a data set. 
         * @summary Create new service definition
         * @param {AdminApiCreateNewDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDefinition(requestParameters: AdminApiCreateNewDefinitionRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceDefinitionResponse> {
            return localVarFp.createNewDefinition(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Delete service definition given layer ID 
         * @summary Delete service definition
         * @param {AdminApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: AdminApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Delete the datastore and layer relating to a zip file on a data set. 
         * @summary Delete layer
         * @param {AdminApiDeleteLayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLayer(requestParameters: AdminApiDeleteLayerRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteLayer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Get the service definition for a given layer ID 
         * @summary Get service definition
         * @param {AdminApiGetByLayerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByLayerId(requestParameters: AdminApiGetByLayerIdRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceDefinitionResponse> {
            return localVarFp.getByLayerId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Ingest a file that has been uploaded to a data set. 
         * @summary Ingest a file to a layer
         * @param {AdminApiIngestFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ingestFile(requestParameters: AdminApiIngestFileRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ingestFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Ingest a file that has been uploaded to the catalog to create a new layer. See [supported ingest formats](doc:supported-ingest-formats) for supported formats. 
         * @summary Ingest file to new layer
         * @param {AdminApiIngestFileNewLayerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ingestFileNewLayer(requestParameters: AdminApiIngestFileNewLayerRequest, options?: AxiosRequestConfig): AxiosPromise<NewLayers> {
            return localVarFp.ingestFileNewLayer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Remove a file from a layer. When you are deleting a file from a layer, the layer may remain if any other files were ingested onto the same layer. If removing a raster file, provide the fileName query parameter; if removing a vector file, provide the fileUri. 
         * @summary Delete a file from a layer
         * @param {AdminApiRemoveFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFile(requestParameters: AdminApiRemoveFileRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Update an existing service definition with billing and coordinates reference system metadata. 
         * @summary Update service definition
         * @param {AdminApiUpdateExistingDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExistingDefinition(requestParameters: AdminApiUpdateExistingDefinitionRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceDefinitionResponse> {
            return localVarFp.updateExistingDefinition(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewDefinition operation in AdminApi.
 * @export
 * @interface AdminApiCreateNewDefinitionRequest
 */
export type AdminApiCreateNewDefinitionRequest = {
    
} & ServiceDefinition

/**
 * Request parameters for deleteById operation in AdminApi.
 * @export
 * @interface AdminApiDeleteByIdRequest
 */
export type AdminApiDeleteByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AdminApiDeleteById
    */
    readonly layerId: string
    
}

/**
 * Request parameters for deleteLayer operation in AdminApi.
 * @export
 * @interface AdminApiDeleteLayerRequest
 */
export type AdminApiDeleteLayerRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AdminApiDeleteLayer
    */
    readonly layerId: string
    
}

/**
 * Request parameters for getByLayerId operation in AdminApi.
 * @export
 * @interface AdminApiGetByLayerIdRequest
 */
export type AdminApiGetByLayerIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AdminApiGetByLayerId
    */
    readonly layerId: string
    
}

/**
 * Request parameters for ingestFile operation in AdminApi.
 * @export
 * @interface AdminApiIngestFileRequest
 */
export type AdminApiIngestFileRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AdminApiIngestFile
    */
    readonly layerId: string
    
} & ManageLayerIngestFileRequest

/**
 * Request parameters for ingestFileNewLayer operation in AdminApi.
 * @export
 * @interface AdminApiIngestFileNewLayerRequest
 */
export type AdminApiIngestFileNewLayerRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AdminApiIngestFileNewLayer
    */
    readonly datasetId: string
    
} & ManageDatasetIngestFileNewLayerRequest

/**
 * Request parameters for removeFile operation in AdminApi.
 * @export
 * @interface AdminApiRemoveFileRequest
 */
export type AdminApiRemoveFileRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AdminApiRemoveFile
    */
    readonly layerId: string
    
    /**
    * 
    * @type {string}
    * @memberof AdminApiRemoveFile
    */
    readonly fileUri?: string
    
    /**
    * 
    * @type {string}
    * @memberof AdminApiRemoveFile
    */
    readonly filename?: string
    
}

/**
 * Request parameters for updateExistingDefinition operation in AdminApi.
 * @export
 * @interface AdminApiUpdateExistingDefinitionRequest
 */
export type AdminApiUpdateExistingDefinitionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AdminApiUpdateExistingDefinition
    */
    readonly layerId: string
    
} & ServiceDefinitionUpdateExistingDefinitionRequest

/**
 * AdminApiGenerated - object-oriented interface
 * @export
 * @class AdminApiGenerated
 * @extends {BaseAPI}
 */
export class AdminApiGenerated extends BaseAPI {
    /**
     * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Create new service definition within a data set. 
     * @summary Create new service definition
     * @param {AdminApiCreateNewDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public createNewDefinition(requestParameters: AdminApiCreateNewDefinitionRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).createNewDefinition(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Delete service definition given layer ID 
     * @summary Delete service definition
     * @param {AdminApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public deleteById(requestParameters: AdminApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Delete the datastore and layer relating to a zip file on a data set. 
     * @summary Delete layer
     * @param {AdminApiDeleteLayerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public deleteLayer(requestParameters: AdminApiDeleteLayerRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).deleteLayer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Get the service definition for a given layer ID 
     * @summary Get service definition
     * @param {AdminApiGetByLayerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public getByLayerId(requestParameters: AdminApiGetByLayerIdRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).getByLayerId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Ingest a file that has been uploaded to a data set. 
     * @summary Ingest a file to a layer
     * @param {AdminApiIngestFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public ingestFile(requestParameters: AdminApiIngestFileRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).ingestFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Ingest a file that has been uploaded to the catalog to create a new layer. See [supported ingest formats](doc:supported-ingest-formats) for supported formats. 
     * @summary Ingest file to new layer
     * @param {AdminApiIngestFileNewLayerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public ingestFileNewLayer(requestParameters: AdminApiIngestFileNewLayerRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).ingestFileNewLayer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Remove a file from a layer. When you are deleting a file from a layer, the layer may remain if any other files were ingested onto the same layer. If removing a raster file, provide the fileName query parameter; if removing a vector file, provide the fileUri. 
     * @summary Delete a file from a layer
     * @param {AdminApiRemoveFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public removeFile(requestParameters: AdminApiRemoveFileRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).removeFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Update an existing service definition with billing and coordinates reference system metadata. 
     * @summary Update service definition
     * @param {AdminApiUpdateExistingDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiGenerated
     */
    public updateExistingDefinition(requestParameters: AdminApiUpdateExistingDefinitionRequest, options?: AxiosRequestConfig) {
        return AdminApiFp(this.configuration).updateExistingDefinition(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
