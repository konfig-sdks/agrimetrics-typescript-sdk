/* tslint:disable */
/* eslint-disable */
/*
Catalog API

This API lists data sets available on Agrimetrics platform.

The version of the OpenAPI document: 


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { RestError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WmtsRestApi - axios parameter creator
 * @export
 */
export const WmtsRestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Query the given data set with theWMTS standard 
         * @summary WMTS Service query
         * @param {string} datasetId 
         * @param {string} layerName 
         * @param {string} style 
         * @param {string} tileMatrixSet 
         * @param {string} tileMatrix 
         * @param {number} tileRow 
         * @param {number} tileCol 
         * @param {string} format 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryTileMatrixSet: async (datasetId: string, layerName: string, style: string, tileMatrixSet: string, tileMatrix: string, tileRow: number, tileCol: number, format: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('queryTileMatrixSet', 'datasetId', datasetId)
            // verify required parameter 'layerName' is not null or undefined
            assertParamExists('queryTileMatrixSet', 'layerName', layerName)
            // verify required parameter 'style' is not null or undefined
            assertParamExists('queryTileMatrixSet', 'style', style)
            // verify required parameter 'tileMatrixSet' is not null or undefined
            assertParamExists('queryTileMatrixSet', 'tileMatrixSet', tileMatrixSet)
            // verify required parameter 'tileMatrix' is not null or undefined
            assertParamExists('queryTileMatrixSet', 'tileMatrix', tileMatrix)
            // verify required parameter 'tileRow' is not null or undefined
            assertParamExists('queryTileMatrixSet', 'tileRow', tileRow)
            // verify required parameter 'tileCol' is not null or undefined
            assertParamExists('queryTileMatrixSet', 'tileCol', tileCol)
            // verify required parameter 'format' is not null or undefined
            assertParamExists('queryTileMatrixSet', 'format', format)
            const localVarPath = `/datasets/{datasetId}/wmts/rest/{layerName}/{style}/{TileMatrixSet}/{TileMatrix}/{TileRow}/{TileCol}`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)))
                .replace(`{${"layerName"}}`, encodeURIComponent(String(layerName !== undefined ? layerName : `-layerName-`)))
                .replace(`{${"style"}}`, encodeURIComponent(String(style !== undefined ? style : `-style-`)))
                .replace(`{${"TileMatrixSet"}}`, encodeURIComponent(String(tileMatrixSet !== undefined ? tileMatrixSet : `-TileMatrixSet-`)))
                .replace(`{${"TileMatrix"}}`, encodeURIComponent(String(tileMatrix !== undefined ? tileMatrix : `-TileMatrix-`)))
                .replace(`{${"TileRow"}}`, encodeURIComponent(String(tileRow !== undefined ? tileRow : `-TileRow-`)))
                .replace(`{${"TileCol"}}`, encodeURIComponent(String(tileCol !== undefined ? tileCol : `-TileCol-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/wmts/rest/{layerName}/{style}/{TileMatrixSet}/{TileMatrix}/{TileRow}/{TileCol}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the given data set with theWMTS standard 
         * @summary WMTS Service query
         * @param {string} datasetId 
         * @param {string} layerName 
         * @param {string} style 
         * @param {string} imageFormat 
         * @param {string} format 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryTilejsonImageFormat: async (datasetId: string, layerName: string, style: string, imageFormat: string, format: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('queryTilejsonImageFormat', 'datasetId', datasetId)
            // verify required parameter 'layerName' is not null or undefined
            assertParamExists('queryTilejsonImageFormat', 'layerName', layerName)
            // verify required parameter 'style' is not null or undefined
            assertParamExists('queryTilejsonImageFormat', 'style', style)
            // verify required parameter 'imageFormat' is not null or undefined
            assertParamExists('queryTilejsonImageFormat', 'imageFormat', imageFormat)
            // verify required parameter 'format' is not null or undefined
            assertParamExists('queryTilejsonImageFormat', 'format', format)
            const localVarPath = `/datasets/{datasetId}/wmts/rest/{layerName}/{style}/tilejson/{imageFormat}`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)))
                .replace(`{${"layerName"}}`, encodeURIComponent(String(layerName !== undefined ? layerName : `-layerName-`)))
                .replace(`{${"style"}}`, encodeURIComponent(String(style !== undefined ? style : `-style-`)))
                .replace(`{${"imageFormat"}}`, encodeURIComponent(String(imageFormat !== undefined ? imageFormat : `-imageFormat-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/wmts/rest/{layerName}/{style}/tilejson/{imageFormat}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the given data set with theWMTS standard 
         * @summary WMTS Service query
         * @param {string} datasetId 
         * @param {string} layerName 
         * @param {string} style 
         * @param {string} tileMatrixSet 
         * @param {string} tileMatrix 
         * @param {number} tileRow 
         * @param {number} tileCol 
         * @param {number} j 
         * @param {number} i 
         * @param {string} format 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceQuery: async (datasetId: string, layerName: string, style: string, tileMatrixSet: string, tileMatrix: string, tileRow: number, tileCol: number, j: number, i: number, format: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('serviceQuery', 'datasetId', datasetId)
            // verify required parameter 'layerName' is not null or undefined
            assertParamExists('serviceQuery', 'layerName', layerName)
            // verify required parameter 'style' is not null or undefined
            assertParamExists('serviceQuery', 'style', style)
            // verify required parameter 'tileMatrixSet' is not null or undefined
            assertParamExists('serviceQuery', 'tileMatrixSet', tileMatrixSet)
            // verify required parameter 'tileMatrix' is not null or undefined
            assertParamExists('serviceQuery', 'tileMatrix', tileMatrix)
            // verify required parameter 'tileRow' is not null or undefined
            assertParamExists('serviceQuery', 'tileRow', tileRow)
            // verify required parameter 'tileCol' is not null or undefined
            assertParamExists('serviceQuery', 'tileCol', tileCol)
            // verify required parameter 'j' is not null or undefined
            assertParamExists('serviceQuery', 'j', j)
            // verify required parameter 'i' is not null or undefined
            assertParamExists('serviceQuery', 'i', i)
            // verify required parameter 'format' is not null or undefined
            assertParamExists('serviceQuery', 'format', format)
            const localVarPath = `/datasets/{datasetId}/wmts/rest/{layerName}/{style}/{TileMatrixSet}/{TileMatrix}/{TileRow}/{TileCol}/{J}/{I}`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)))
                .replace(`{${"layerName"}}`, encodeURIComponent(String(layerName !== undefined ? layerName : `-layerName-`)))
                .replace(`{${"style"}}`, encodeURIComponent(String(style !== undefined ? style : `-style-`)))
                .replace(`{${"TileMatrixSet"}}`, encodeURIComponent(String(tileMatrixSet !== undefined ? tileMatrixSet : `-TileMatrixSet-`)))
                .replace(`{${"TileMatrix"}}`, encodeURIComponent(String(tileMatrix !== undefined ? tileMatrix : `-TileMatrix-`)))
                .replace(`{${"TileRow"}}`, encodeURIComponent(String(tileRow !== undefined ? tileRow : `-TileRow-`)))
                .replace(`{${"TileCol"}}`, encodeURIComponent(String(tileCol !== undefined ? tileCol : `-TileCol-`)))
                .replace(`{${"J"}}`, encodeURIComponent(String(j !== undefined ? j : `-J-`)))
                .replace(`{${"I"}}`, encodeURIComponent(String(i !== undefined ? i : `-I-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/wmts/rest/{layerName}/{style}/{TileMatrixSet}/{TileMatrix}/{TileRow}/{TileCol}/{J}/{I}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WmtsRestApi - functional programming interface
 * @export
 */
export const WmtsRestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WmtsRestApiAxiosParamCreator(configuration)
    return {
        /**
         * Query the given data set with theWMTS standard 
         * @summary WMTS Service query
         * @param {WmtsRestApiQueryTileMatrixSetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryTileMatrixSet(requestParameters: WmtsRestApiQueryTileMatrixSetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryTileMatrixSet(requestParameters.datasetId, requestParameters.layerName, requestParameters.style, requestParameters.tileMatrixSet, requestParameters.tileMatrix, requestParameters.tileRow, requestParameters.tileCol, requestParameters.format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query the given data set with theWMTS standard 
         * @summary WMTS Service query
         * @param {WmtsRestApiQueryTilejsonImageFormatRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryTilejsonImageFormat(requestParameters: WmtsRestApiQueryTilejsonImageFormatRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryTilejsonImageFormat(requestParameters.datasetId, requestParameters.layerName, requestParameters.style, requestParameters.imageFormat, requestParameters.format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query the given data set with theWMTS standard 
         * @summary WMTS Service query
         * @param {WmtsRestApiServiceQueryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async serviceQuery(requestParameters: WmtsRestApiServiceQueryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.serviceQuery(requestParameters.datasetId, requestParameters.layerName, requestParameters.style, requestParameters.tileMatrixSet, requestParameters.tileMatrix, requestParameters.tileRow, requestParameters.tileCol, requestParameters.j, requestParameters.i, requestParameters.format, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WmtsRestApi - factory interface
 * @export
 */
export const WmtsRestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WmtsRestApiFp(configuration)
    return {
        /**
         * Query the given data set with theWMTS standard 
         * @summary WMTS Service query
         * @param {WmtsRestApiQueryTileMatrixSetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryTileMatrixSet(requestParameters: WmtsRestApiQueryTileMatrixSetRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.queryTileMatrixSet(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the given data set with theWMTS standard 
         * @summary WMTS Service query
         * @param {WmtsRestApiQueryTilejsonImageFormatRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryTilejsonImageFormat(requestParameters: WmtsRestApiQueryTilejsonImageFormatRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.queryTilejsonImageFormat(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the given data set with theWMTS standard 
         * @summary WMTS Service query
         * @param {WmtsRestApiServiceQueryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceQuery(requestParameters: WmtsRestApiServiceQueryRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.serviceQuery(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for queryTileMatrixSet operation in WmtsRestApi.
 * @export
 * @interface WmtsRestApiQueryTileMatrixSetRequest
 */
export type WmtsRestApiQueryTileMatrixSetRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof WmtsRestApiQueryTileMatrixSet
    */
    readonly datasetId: string
    
    /**
    * 
    * @type {string}
    * @memberof WmtsRestApiQueryTileMatrixSet
    */
    readonly layerName: string
    
    /**
    * 
    * @type {string}
    * @memberof WmtsRestApiQueryTileMatrixSet
    */
    readonly style: string
    
    /**
    * 
    * @type {string}
    * @memberof WmtsRestApiQueryTileMatrixSet
    */
    readonly tileMatrixSet: string
    
    /**
    * 
    * @type {string}
    * @memberof WmtsRestApiQueryTileMatrixSet
    */
    readonly tileMatrix: string
    
    /**
    * 
    * @type {number}
    * @memberof WmtsRestApiQueryTileMatrixSet
    */
    readonly tileRow: number
    
    /**
    * 
    * @type {number}
    * @memberof WmtsRestApiQueryTileMatrixSet
    */
    readonly tileCol: number
    
    /**
    * 
    * @type {string}
    * @memberof WmtsRestApiQueryTileMatrixSet
    */
    readonly format: string
    
}

/**
 * Request parameters for queryTilejsonImageFormat operation in WmtsRestApi.
 * @export
 * @interface WmtsRestApiQueryTilejsonImageFormatRequest
 */
export type WmtsRestApiQueryTilejsonImageFormatRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof WmtsRestApiQueryTilejsonImageFormat
    */
    readonly datasetId: string
    
    /**
    * 
    * @type {string}
    * @memberof WmtsRestApiQueryTilejsonImageFormat
    */
    readonly layerName: string
    
    /**
    * 
    * @type {string}
    * @memberof WmtsRestApiQueryTilejsonImageFormat
    */
    readonly style: string
    
    /**
    * 
    * @type {string}
    * @memberof WmtsRestApiQueryTilejsonImageFormat
    */
    readonly imageFormat: string
    
    /**
    * 
    * @type {string}
    * @memberof WmtsRestApiQueryTilejsonImageFormat
    */
    readonly format: string
    
}

/**
 * Request parameters for serviceQuery operation in WmtsRestApi.
 * @export
 * @interface WmtsRestApiServiceQueryRequest
 */
export type WmtsRestApiServiceQueryRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof WmtsRestApiServiceQuery
    */
    readonly datasetId: string
    
    /**
    * 
    * @type {string}
    * @memberof WmtsRestApiServiceQuery
    */
    readonly layerName: string
    
    /**
    * 
    * @type {string}
    * @memberof WmtsRestApiServiceQuery
    */
    readonly style: string
    
    /**
    * 
    * @type {string}
    * @memberof WmtsRestApiServiceQuery
    */
    readonly tileMatrixSet: string
    
    /**
    * 
    * @type {string}
    * @memberof WmtsRestApiServiceQuery
    */
    readonly tileMatrix: string
    
    /**
    * 
    * @type {number}
    * @memberof WmtsRestApiServiceQuery
    */
    readonly tileRow: number
    
    /**
    * 
    * @type {number}
    * @memberof WmtsRestApiServiceQuery
    */
    readonly tileCol: number
    
    /**
    * 
    * @type {number}
    * @memberof WmtsRestApiServiceQuery
    */
    readonly j: number
    
    /**
    * 
    * @type {number}
    * @memberof WmtsRestApiServiceQuery
    */
    readonly i: number
    
    /**
    * 
    * @type {string}
    * @memberof WmtsRestApiServiceQuery
    */
    readonly format: string
    
}

/**
 * WmtsRestApiGenerated - object-oriented interface
 * @export
 * @class WmtsRestApiGenerated
 * @extends {BaseAPI}
 */
export class WmtsRestApiGenerated extends BaseAPI {
    /**
     * Query the given data set with theWMTS standard 
     * @summary WMTS Service query
     * @param {WmtsRestApiQueryTileMatrixSetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmtsRestApiGenerated
     */
    public queryTileMatrixSet(requestParameters: WmtsRestApiQueryTileMatrixSetRequest, options?: AxiosRequestConfig) {
        return WmtsRestApiFp(this.configuration).queryTileMatrixSet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the given data set with theWMTS standard 
     * @summary WMTS Service query
     * @param {WmtsRestApiQueryTilejsonImageFormatRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmtsRestApiGenerated
     */
    public queryTilejsonImageFormat(requestParameters: WmtsRestApiQueryTilejsonImageFormatRequest, options?: AxiosRequestConfig) {
        return WmtsRestApiFp(this.configuration).queryTilejsonImageFormat(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the given data set with theWMTS standard 
     * @summary WMTS Service query
     * @param {WmtsRestApiServiceQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WmtsRestApiGenerated
     */
    public serviceQuery(requestParameters: WmtsRestApiServiceQueryRequest, options?: AxiosRequestConfig) {
        return WmtsRestApiFp(this.configuration).serviceQuery(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
