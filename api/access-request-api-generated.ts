/* tslint:disable */
/* eslint-disable */
/*
Catalog API

This API lists data sets available on Agrimetrics platform.

The version of the OpenAPI document: 


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccessRequestCreateNewRequestRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccessRequestApi - axios parameter creator
 * @export
 */
export const AccessRequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AccessRequestCreateNewRequestRequest} [accessRequestCreateNewRequestRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewRequest: async (accessRequestCreateNewRequestRequest?: AccessRequestCreateNewRequestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/access-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: accessRequestCreateNewRequestRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/access-requests',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(accessRequestCreateNewRequestRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} requestId 
         * @param {string} dataSetId 
         * @param {boolean} [accepted] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRequestById: async (requestId: string, dataSetId: string, accepted?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('deleteRequestById', 'requestId', requestId)
            // verify required parameter 'dataSetId' is not null or undefined
            assertParamExists('deleteRequestById', 'dataSetId', dataSetId)
            const localVarPath = `/access-requests/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId !== undefined ? requestId : `-requestId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (dataSetId !== undefined) {
                localVarQueryParameter['dataSetId'] = dataSetId;
            }

            if (accepted !== undefined) {
                localVarQueryParameter['accepted'] = accepted;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/access-requests/{requestId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [dataSetId] 
         * @param {string} [requestingEntityId] 
         * @param {Array<string>} [entityId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (dataSetId?: string, requestingEntityId?: string, entityId?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/access-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (dataSetId !== undefined) {
                localVarQueryParameter['dataSetId'] = dataSetId;
            }

            if (requestingEntityId !== undefined) {
                localVarQueryParameter['requestingEntityId'] = requestingEntityId;
            }

            if (entityId) {
                localVarQueryParameter['entityId'] = entityId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/access-requests',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccessRequestApi - functional programming interface
 * @export
 */
export const AccessRequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccessRequestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AccessRequestApiCreateNewRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewRequest(requestParameters: AccessRequestApiCreateNewRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const accessRequestCreateNewRequestRequest: AccessRequestCreateNewRequestRequest = {
                dataSetId: requestParameters.dataSetId,
                requestingEntityId: requestParameters.requestingEntityId,
                requesterName: requestParameters.requesterName,
                requesterEmail: requestParameters.requesterEmail,
                requestMessage: requestParameters.requestMessage
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewRequest(accessRequestCreateNewRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AccessRequestApiDeleteRequestByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRequestById(requestParameters: AccessRequestApiDeleteRequestByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRequestById(requestParameters.requestId, requestParameters.dataSetId, requestParameters.accepted, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {AccessRequestApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: AccessRequestApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.dataSetId, requestParameters.requestingEntityId, requestParameters.entityId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccessRequestApi - factory interface
 * @export
 */
export const AccessRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccessRequestApiFp(configuration)
    return {
        /**
         * 
         * @param {AccessRequestApiCreateNewRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewRequest(requestParameters: AccessRequestApiCreateNewRequestRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createNewRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccessRequestApiDeleteRequestByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRequestById(requestParameters: AccessRequestApiDeleteRequestByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteRequestById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AccessRequestApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: AccessRequestApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewRequest operation in AccessRequestApi.
 * @export
 * @interface AccessRequestApiCreateNewRequestRequest
 */
export type AccessRequestApiCreateNewRequestRequest = {
    
} & AccessRequestCreateNewRequestRequest

/**
 * Request parameters for deleteRequestById operation in AccessRequestApi.
 * @export
 * @interface AccessRequestApiDeleteRequestByIdRequest
 */
export type AccessRequestApiDeleteRequestByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AccessRequestApiDeleteRequestById
    */
    readonly requestId: string
    
    /**
    * 
    * @type {string}
    * @memberof AccessRequestApiDeleteRequestById
    */
    readonly dataSetId: string
    
    /**
    * 
    * @type {boolean}
    * @memberof AccessRequestApiDeleteRequestById
    */
    readonly accepted?: boolean
    
}

/**
 * Request parameters for list operation in AccessRequestApi.
 * @export
 * @interface AccessRequestApiListRequest
 */
export type AccessRequestApiListRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof AccessRequestApiList
    */
    readonly dataSetId?: string
    
    /**
    * 
    * @type {string}
    * @memberof AccessRequestApiList
    */
    readonly requestingEntityId?: string
    
    /**
    * 
    * @type {Array<string>}
    * @memberof AccessRequestApiList
    */
    readonly entityId?: Array<string>
    
}

/**
 * AccessRequestApiGenerated - object-oriented interface
 * @export
 * @class AccessRequestApiGenerated
 * @extends {BaseAPI}
 */
export class AccessRequestApiGenerated extends BaseAPI {
    /**
     * 
     * @param {AccessRequestApiCreateNewRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestApiGenerated
     */
    public createNewRequest(requestParameters: AccessRequestApiCreateNewRequestRequest, options?: AxiosRequestConfig) {
        return AccessRequestApiFp(this.configuration).createNewRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccessRequestApiDeleteRequestByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestApiGenerated
     */
    public deleteRequestById(requestParameters: AccessRequestApiDeleteRequestByIdRequest, options?: AxiosRequestConfig) {
        return AccessRequestApiFp(this.configuration).deleteRequestById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccessRequestApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccessRequestApiGenerated
     */
    public list(requestParameters: AccessRequestApiListRequest = {}, options?: AxiosRequestConfig) {
        return AccessRequestApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
