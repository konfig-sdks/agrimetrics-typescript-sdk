/* tslint:disable */
/* eslint-disable */
/*
Catalog API

This API lists data sets available on Agrimetrics platform.

The version of the OpenAPI document: 


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Billable } from '../models';
// @ts-ignore
import { RestError } from '../models';
// @ts-ignore
import { ServiceDefinition } from '../models';
// @ts-ignore
import { ServiceDefinitionResponse } from '../models';
// @ts-ignore
import { ServiceDefinitionUpdateExistingDefinitionRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ServiceDefinitionApi - axios parameter creator
 * @export
 */
export const ServiceDefinitionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Create new service definition within a data set. 
         * @summary Create new service definition
         * @param {ServiceDefinition} serviceDefinition 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDefinition: async (serviceDefinition: ServiceDefinition, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceDefinition' is not null or undefined
            assertParamExists('createNewDefinition', 'serviceDefinition', serviceDefinition)
            const localVarPath = `/serviceDefinition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: serviceDefinition,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/serviceDefinition',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(serviceDefinition, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Delete service definition given layer ID 
         * @summary Delete service definition
         * @param {string} layerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (layerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerId' is not null or undefined
            assertParamExists('deleteById', 'layerId', layerId)
            const localVarPath = `/serviceDefinition/{layerId}`
                .replace(`{${"layerId"}}`, encodeURIComponent(String(layerId !== undefined ? layerId : `-layerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/serviceDefinition/{layerId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Get the service definition for a given layer ID 
         * @summary Get service definition
         * @param {string} layerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByLayerId: async (layerId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerId' is not null or undefined
            assertParamExists('getByLayerId', 'layerId', layerId)
            const localVarPath = `/serviceDefinition/{layerId}`
                .replace(`{${"layerId"}}`, encodeURIComponent(String(layerId !== undefined ? layerId : `-layerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/serviceDefinition/{layerId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Update an existing service definition with billing and coordinates reference system metadata. 
         * @summary Update service definition
         * @param {string} layerId 
         * @param {ServiceDefinitionUpdateExistingDefinitionRequest} [serviceDefinitionUpdateExistingDefinitionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExistingDefinition: async (layerId: string, serviceDefinitionUpdateExistingDefinitionRequest?: ServiceDefinitionUpdateExistingDefinitionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'layerId' is not null or undefined
            assertParamExists('updateExistingDefinition', 'layerId', layerId)
            const localVarPath = `/serviceDefinition/{layerId}`
                .replace(`{${"layerId"}}`, encodeURIComponent(String(layerId !== undefined ? layerId : `-layerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: serviceDefinitionUpdateExistingDefinitionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/serviceDefinition/{layerId}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(serviceDefinitionUpdateExistingDefinitionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceDefinitionApi - functional programming interface
 * @export
 */
export const ServiceDefinitionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceDefinitionApiAxiosParamCreator(configuration)
    return {
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Create new service definition within a data set. 
         * @summary Create new service definition
         * @param {ServiceDefinitionApiCreateNewDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewDefinition(requestParameters: ServiceDefinitionApiCreateNewDefinitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDefinitionResponse>> {
            const serviceDefinition: ServiceDefinition = {
                datasetId: requestParameters.datasetId,
                layerName: requestParameters.layerName,
                service: requestParameters.service,
                WFS: requestParameters.WFS,
                WCS: requestParameters.WCS,
                WMS: requestParameters.WMS,
                WMTS: requestParameters.WMTS,
                OGCApiFeatures: requestParameters.OGCApiFeatures,
                OGCApiTiles: requestParameters.OGCApiTiles,
                temporal: requestParameters.temporal,
                datastore: requestParameters.datastore,
                geoserverHostName: requestParameters.geoserverHostName,
                geometryField: requestParameters.geometryField,
                billable: requestParameters.billable,
                defaultEPSGCode: requestParameters.defaultEPSGCode
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewDefinition(serviceDefinition, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Delete service definition given layer ID 
         * @summary Delete service definition
         * @param {ServiceDefinitionApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: ServiceDefinitionApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.layerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Get the service definition for a given layer ID 
         * @summary Get service definition
         * @param {ServiceDefinitionApiGetByLayerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByLayerId(requestParameters: ServiceDefinitionApiGetByLayerIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDefinitionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByLayerId(requestParameters.layerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Update an existing service definition with billing and coordinates reference system metadata. 
         * @summary Update service definition
         * @param {ServiceDefinitionApiUpdateExistingDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExistingDefinition(requestParameters: ServiceDefinitionApiUpdateExistingDefinitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceDefinitionResponse>> {
            const serviceDefinitionUpdateExistingDefinitionRequest: ServiceDefinitionUpdateExistingDefinitionRequest = {
                billable: requestParameters.billable,
                defaultEPSGCode: requestParameters.defaultEPSGCode
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExistingDefinition(requestParameters.layerId, serviceDefinitionUpdateExistingDefinitionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceDefinitionApi - factory interface
 * @export
 */
export const ServiceDefinitionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceDefinitionApiFp(configuration)
    return {
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Create new service definition within a data set. 
         * @summary Create new service definition
         * @param {ServiceDefinitionApiCreateNewDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewDefinition(requestParameters: ServiceDefinitionApiCreateNewDefinitionRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceDefinitionResponse> {
            return localVarFp.createNewDefinition(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Delete service definition given layer ID 
         * @summary Delete service definition
         * @param {ServiceDefinitionApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: ServiceDefinitionApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Get the service definition for a given layer ID 
         * @summary Get service definition
         * @param {ServiceDefinitionApiGetByLayerIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByLayerId(requestParameters: ServiceDefinitionApiGetByLayerIdRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceDefinitionResponse> {
            return localVarFp.getByLayerId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Update an existing service definition with billing and coordinates reference system metadata. 
         * @summary Update service definition
         * @param {ServiceDefinitionApiUpdateExistingDefinitionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExistingDefinition(requestParameters: ServiceDefinitionApiUpdateExistingDefinitionRequest, options?: AxiosRequestConfig): AxiosPromise<ServiceDefinitionResponse> {
            return localVarFp.updateExistingDefinition(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewDefinition operation in ServiceDefinitionApi.
 * @export
 * @interface ServiceDefinitionApiCreateNewDefinitionRequest
 */
export type ServiceDefinitionApiCreateNewDefinitionRequest = {
    
} & ServiceDefinition

/**
 * Request parameters for deleteById operation in ServiceDefinitionApi.
 * @export
 * @interface ServiceDefinitionApiDeleteByIdRequest
 */
export type ServiceDefinitionApiDeleteByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ServiceDefinitionApiDeleteById
    */
    readonly layerId: string
    
}

/**
 * Request parameters for getByLayerId operation in ServiceDefinitionApi.
 * @export
 * @interface ServiceDefinitionApiGetByLayerIdRequest
 */
export type ServiceDefinitionApiGetByLayerIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ServiceDefinitionApiGetByLayerId
    */
    readonly layerId: string
    
}

/**
 * Request parameters for updateExistingDefinition operation in ServiceDefinitionApi.
 * @export
 * @interface ServiceDefinitionApiUpdateExistingDefinitionRequest
 */
export type ServiceDefinitionApiUpdateExistingDefinitionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ServiceDefinitionApiUpdateExistingDefinition
    */
    readonly layerId: string
    
} & ServiceDefinitionUpdateExistingDefinitionRequest

/**
 * ServiceDefinitionApiGenerated - object-oriented interface
 * @export
 * @class ServiceDefinitionApiGenerated
 * @extends {BaseAPI}
 */
export class ServiceDefinitionApiGenerated extends BaseAPI {
    /**
     * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Create new service definition within a data set. 
     * @summary Create new service definition
     * @param {ServiceDefinitionApiCreateNewDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDefinitionApiGenerated
     */
    public createNewDefinition(requestParameters: ServiceDefinitionApiCreateNewDefinitionRequest, options?: AxiosRequestConfig) {
        return ServiceDefinitionApiFp(this.configuration).createNewDefinition(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Delete service definition given layer ID 
     * @summary Delete service definition
     * @param {ServiceDefinitionApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDefinitionApiGenerated
     */
    public deleteById(requestParameters: ServiceDefinitionApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return ServiceDefinitionApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Get the service definition for a given layer ID 
     * @summary Get service definition
     * @param {ServiceDefinitionApiGetByLayerIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDefinitionApiGenerated
     */
    public getByLayerId(requestParameters: ServiceDefinitionApiGetByLayerIdRequest, options?: AxiosRequestConfig) {
        return ServiceDefinitionApiFp(this.configuration).getByLayerId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * > :warning: **This is an Agrimetrics internal operation. It relies on information which is not exposed externally.**  Update an existing service definition with billing and coordinates reference system metadata. 
     * @summary Update service definition
     * @param {ServiceDefinitionApiUpdateExistingDefinitionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceDefinitionApiGenerated
     */
    public updateExistingDefinition(requestParameters: ServiceDefinitionApiUpdateExistingDefinitionRequest, options?: AxiosRequestConfig) {
        return ServiceDefinitionApiFp(this.configuration).updateExistingDefinition(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
