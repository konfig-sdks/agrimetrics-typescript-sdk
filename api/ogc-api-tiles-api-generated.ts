/* tslint:disable */
/* eslint-disable */
/*
Catalog API

This API lists data sets available on Agrimetrics platform.

The version of the OpenAPI document: 


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { RestError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OgcApiTilesApi - axios parameter creator
 * @export
 */
export const OgcApiTilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConformance: async (datasetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('getConformance', 'datasetId', datasetId)
            const localVarPath = `/datasets/{datasetId}/ogc/tiles/v1/conformance`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/ogc/tiles/v1/conformance',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {string} datasetId 
         * @param {string} collectionId 
         * @param {string} tileMatrixSetId 
         * @param {string} tileMatrix 
         * @param {number} tileRow 
         * @param {number} tileCol 
         * @param {string} f 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryTilesCollection: async (datasetId: string, collectionId: string, tileMatrixSetId: string, tileMatrix: string, tileRow: number, tileCol: number, f: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('getQueryTilesCollection', 'datasetId', datasetId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('getQueryTilesCollection', 'collectionId', collectionId)
            // verify required parameter 'tileMatrixSetId' is not null or undefined
            assertParamExists('getQueryTilesCollection', 'tileMatrixSetId', tileMatrixSetId)
            // verify required parameter 'tileMatrix' is not null or undefined
            assertParamExists('getQueryTilesCollection', 'tileMatrix', tileMatrix)
            // verify required parameter 'tileRow' is not null or undefined
            assertParamExists('getQueryTilesCollection', 'tileRow', tileRow)
            // verify required parameter 'tileCol' is not null or undefined
            assertParamExists('getQueryTilesCollection', 'tileCol', tileCol)
            // verify required parameter 'f' is not null or undefined
            assertParamExists('getQueryTilesCollection', 'f', f)
            const localVarPath = `/datasets/{datasetId}/ogc/tiles/v1/collections/{collectionId}/map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"tileMatrixSetId"}}`, encodeURIComponent(String(tileMatrixSetId !== undefined ? tileMatrixSetId : `-tileMatrixSetId-`)))
                .replace(`{${"tileMatrix"}}`, encodeURIComponent(String(tileMatrix !== undefined ? tileMatrix : `-tileMatrix-`)))
                .replace(`{${"tileRow"}}`, encodeURIComponent(String(tileRow !== undefined ? tileRow : `-tileRow-`)))
                .replace(`{${"tileCol"}}`, encodeURIComponent(String(tileCol !== undefined ? tileCol : `-tileCol-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (f !== undefined) {
                localVarQueryParameter['f'] = f;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/ogc/tiles/v1/collections/{collectionId}/map/tiles/{tileMatrixSetId}/{tileMatrix}/{tileRow}/{tileCol}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {string} datasetId 
         * @param {string} collectionId 
         * @param {string} tileMatrixSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTilesCollection: async (datasetId: string, collectionId: string, tileMatrixSetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('getTilesCollection', 'datasetId', datasetId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('getTilesCollection', 'collectionId', collectionId)
            // verify required parameter 'tileMatrixSetId' is not null or undefined
            assertParamExists('getTilesCollection', 'tileMatrixSetId', tileMatrixSetId)
            const localVarPath = `/datasets/{datasetId}/ogc/tiles/v1/collections/{collectionId}/tiles/{tileMatrixSetId}`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)))
                .replace(`{${"tileMatrixSetId"}}`, encodeURIComponent(String(tileMatrixSetId !== undefined ? tileMatrixSetId : `-tileMatrixSetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/ogc/tiles/v1/collections/{collectionId}/tiles/{tileMatrixSetId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {string} datasetId 
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCollectionById: async (datasetId: string, collectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('queryCollectionById', 'datasetId', datasetId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('queryCollectionById', 'collectionId', collectionId)
            const localVarPath = `/datasets/{datasetId}/ogc/tiles/v1/collections/{collectionId}`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/ogc/tiles/v1/collections/{collectionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {string} datasetId 
         * @param {string} collectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCollectionQueryables: async (datasetId: string, collectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('queryCollectionQueryables', 'datasetId', datasetId)
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('queryCollectionQueryables', 'collectionId', collectionId)
            const localVarPath = `/datasets/{datasetId}/ogc/tiles/v1/collections/{collectionId}/queryables`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)))
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId !== undefined ? collectionId : `-collectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/ogc/tiles/v1/collections/{collectionId}/queryables',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCollections: async (datasetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('queryCollections', 'datasetId', datasetId)
            const localVarPath = `/datasets/{datasetId}/ogc/tiles/v1/collections`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/ogc/tiles/v1/collections',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryTileMatrixSets: async (datasetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('queryTileMatrixSets', 'datasetId', datasetId)
            const localVarPath = `/datasets/{datasetId}/ogc/tiles/v1/tileMatrixSets`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/ogc/tiles/v1/tileMatrixSets',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {string} datasetId 
         * @param {string} tileMatrixSetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryTileMatrixSets_1: async (datasetId: string, tileMatrixSetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('queryTileMatrixSets_1', 'datasetId', datasetId)
            // verify required parameter 'tileMatrixSetId' is not null or undefined
            assertParamExists('queryTileMatrixSets_1', 'tileMatrixSetId', tileMatrixSetId)
            const localVarPath = `/datasets/{datasetId}/ogc/tiles/v1/tileMatrixSets/{tileMatrixSetId}`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)))
                .replace(`{${"tileMatrixSetId"}}`, encodeURIComponent(String(tileMatrixSetId !== undefined ? tileMatrixSetId : `-tileMatrixSetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/ogc/tiles/v1/tileMatrixSets/{tileMatrixSetId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {string} datasetId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryTilesV1: async (datasetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datasetId' is not null or undefined
            assertParamExists('queryTilesV1', 'datasetId', datasetId)
            const localVarPath = `/datasets/{datasetId}/ogc/tiles/v1`
                .replace(`{${"datasetId"}}`, encodeURIComponent(String(datasetId !== undefined ? datasetId : `-datasetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/datasets/{datasetId}/ogc/tiles/v1',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OgcApiTilesApi - functional programming interface
 * @export
 */
export const OgcApiTilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OgcApiTilesApiAxiosParamCreator(configuration)
    return {
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {OgcApiTilesApiGetConformanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConformance(requestParameters: OgcApiTilesApiGetConformanceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConformance(requestParameters.datasetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {OgcApiTilesApiGetQueryTilesCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueryTilesCollection(requestParameters: OgcApiTilesApiGetQueryTilesCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQueryTilesCollection(requestParameters.datasetId, requestParameters.collectionId, requestParameters.tileMatrixSetId, requestParameters.tileMatrix, requestParameters.tileRow, requestParameters.tileCol, requestParameters.f, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {OgcApiTilesApiGetTilesCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTilesCollection(requestParameters: OgcApiTilesApiGetTilesCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTilesCollection(requestParameters.datasetId, requestParameters.collectionId, requestParameters.tileMatrixSetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {OgcApiTilesApiQueryCollectionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryCollectionById(requestParameters: OgcApiTilesApiQueryCollectionByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryCollectionById(requestParameters.datasetId, requestParameters.collectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {OgcApiTilesApiQueryCollectionQueryablesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryCollectionQueryables(requestParameters: OgcApiTilesApiQueryCollectionQueryablesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryCollectionQueryables(requestParameters.datasetId, requestParameters.collectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {OgcApiTilesApiQueryCollectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryCollections(requestParameters: OgcApiTilesApiQueryCollectionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryCollections(requestParameters.datasetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {OgcApiTilesApiQueryTileMatrixSetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryTileMatrixSets(requestParameters: OgcApiTilesApiQueryTileMatrixSetsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryTileMatrixSets(requestParameters.datasetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {OgcApiTilesApiQueryTileMatrixSets0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryTileMatrixSets_1(requestParameters: OgcApiTilesApiQueryTileMatrixSets0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryTileMatrixSets_1(requestParameters.datasetId, requestParameters.tileMatrixSetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {OgcApiTilesApiQueryTilesV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryTilesV1(requestParameters: OgcApiTilesApiQueryTilesV1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryTilesV1(requestParameters.datasetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OgcApiTilesApi - factory interface
 * @export
 */
export const OgcApiTilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OgcApiTilesApiFp(configuration)
    return {
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {OgcApiTilesApiGetConformanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConformance(requestParameters: OgcApiTilesApiGetConformanceRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getConformance(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {OgcApiTilesApiGetQueryTilesCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryTilesCollection(requestParameters: OgcApiTilesApiGetQueryTilesCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getQueryTilesCollection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {OgcApiTilesApiGetTilesCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTilesCollection(requestParameters: OgcApiTilesApiGetTilesCollectionRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getTilesCollection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {OgcApiTilesApiQueryCollectionByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCollectionById(requestParameters: OgcApiTilesApiQueryCollectionByIdRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.queryCollectionById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {OgcApiTilesApiQueryCollectionQueryablesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCollectionQueryables(requestParameters: OgcApiTilesApiQueryCollectionQueryablesRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.queryCollectionQueryables(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {OgcApiTilesApiQueryCollectionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCollections(requestParameters: OgcApiTilesApiQueryCollectionsRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.queryCollections(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {OgcApiTilesApiQueryTileMatrixSetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryTileMatrixSets(requestParameters: OgcApiTilesApiQueryTileMatrixSetsRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.queryTileMatrixSets(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {OgcApiTilesApiQueryTileMatrixSets0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryTileMatrixSets_1(requestParameters: OgcApiTilesApiQueryTileMatrixSets0Request, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.queryTileMatrixSets_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Query the given data set with OGC API Tiles standard 
         * @summary OGC API Tiles query
         * @param {OgcApiTilesApiQueryTilesV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryTilesV1(requestParameters: OgcApiTilesApiQueryTilesV1Request, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.queryTilesV1(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getConformance operation in OgcApiTilesApi.
 * @export
 * @interface OgcApiTilesApiGetConformanceRequest
 */
export type OgcApiTilesApiGetConformanceRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OgcApiTilesApiGetConformance
    */
    readonly datasetId: string
    
}

/**
 * Request parameters for getQueryTilesCollection operation in OgcApiTilesApi.
 * @export
 * @interface OgcApiTilesApiGetQueryTilesCollectionRequest
 */
export type OgcApiTilesApiGetQueryTilesCollectionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OgcApiTilesApiGetQueryTilesCollection
    */
    readonly datasetId: string
    
    /**
    * 
    * @type {string}
    * @memberof OgcApiTilesApiGetQueryTilesCollection
    */
    readonly collectionId: string
    
    /**
    * 
    * @type {string}
    * @memberof OgcApiTilesApiGetQueryTilesCollection
    */
    readonly tileMatrixSetId: string
    
    /**
    * 
    * @type {string}
    * @memberof OgcApiTilesApiGetQueryTilesCollection
    */
    readonly tileMatrix: string
    
    /**
    * 
    * @type {number}
    * @memberof OgcApiTilesApiGetQueryTilesCollection
    */
    readonly tileRow: number
    
    /**
    * 
    * @type {number}
    * @memberof OgcApiTilesApiGetQueryTilesCollection
    */
    readonly tileCol: number
    
    /**
    * 
    * @type {string}
    * @memberof OgcApiTilesApiGetQueryTilesCollection
    */
    readonly f: string
    
}

/**
 * Request parameters for getTilesCollection operation in OgcApiTilesApi.
 * @export
 * @interface OgcApiTilesApiGetTilesCollectionRequest
 */
export type OgcApiTilesApiGetTilesCollectionRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OgcApiTilesApiGetTilesCollection
    */
    readonly datasetId: string
    
    /**
    * 
    * @type {string}
    * @memberof OgcApiTilesApiGetTilesCollection
    */
    readonly collectionId: string
    
    /**
    * 
    * @type {string}
    * @memberof OgcApiTilesApiGetTilesCollection
    */
    readonly tileMatrixSetId: string
    
}

/**
 * Request parameters for queryCollectionById operation in OgcApiTilesApi.
 * @export
 * @interface OgcApiTilesApiQueryCollectionByIdRequest
 */
export type OgcApiTilesApiQueryCollectionByIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OgcApiTilesApiQueryCollectionById
    */
    readonly datasetId: string
    
    /**
    * 
    * @type {string}
    * @memberof OgcApiTilesApiQueryCollectionById
    */
    readonly collectionId: string
    
}

/**
 * Request parameters for queryCollectionQueryables operation in OgcApiTilesApi.
 * @export
 * @interface OgcApiTilesApiQueryCollectionQueryablesRequest
 */
export type OgcApiTilesApiQueryCollectionQueryablesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OgcApiTilesApiQueryCollectionQueryables
    */
    readonly datasetId: string
    
    /**
    * 
    * @type {string}
    * @memberof OgcApiTilesApiQueryCollectionQueryables
    */
    readonly collectionId: string
    
}

/**
 * Request parameters for queryCollections operation in OgcApiTilesApi.
 * @export
 * @interface OgcApiTilesApiQueryCollectionsRequest
 */
export type OgcApiTilesApiQueryCollectionsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OgcApiTilesApiQueryCollections
    */
    readonly datasetId: string
    
}

/**
 * Request parameters for queryTileMatrixSets operation in OgcApiTilesApi.
 * @export
 * @interface OgcApiTilesApiQueryTileMatrixSetsRequest
 */
export type OgcApiTilesApiQueryTileMatrixSetsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof OgcApiTilesApiQueryTileMatrixSets
    */
    readonly datasetId: string
    
}

/**
 * Request parameters for queryTileMatrixSets_1 operation in OgcApiTilesApi.
 * @export
 * @interface OgcApiTilesApiQueryTileMatrixSets0Request
 */
export type OgcApiTilesApiQueryTileMatrixSets0Request = {
    
    /**
    * 
    * @type {string}
    * @memberof OgcApiTilesApiQueryTileMatrixSets0
    */
    readonly datasetId: string
    
    /**
    * 
    * @type {string}
    * @memberof OgcApiTilesApiQueryTileMatrixSets0
    */
    readonly tileMatrixSetId: string
    
}

/**
 * Request parameters for queryTilesV1 operation in OgcApiTilesApi.
 * @export
 * @interface OgcApiTilesApiQueryTilesV1Request
 */
export type OgcApiTilesApiQueryTilesV1Request = {
    
    /**
    * 
    * @type {string}
    * @memberof OgcApiTilesApiQueryTilesV1
    */
    readonly datasetId: string
    
}

/**
 * OgcApiTilesApiGenerated - object-oriented interface
 * @export
 * @class OgcApiTilesApiGenerated
 * @extends {BaseAPI}
 */
export class OgcApiTilesApiGenerated extends BaseAPI {
    /**
     * Query the given data set with OGC API Tiles standard 
     * @summary OGC API Tiles query
     * @param {OgcApiTilesApiGetConformanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OgcApiTilesApiGenerated
     */
    public getConformance(requestParameters: OgcApiTilesApiGetConformanceRequest, options?: AxiosRequestConfig) {
        return OgcApiTilesApiFp(this.configuration).getConformance(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the given data set with OGC API Tiles standard 
     * @summary OGC API Tiles query
     * @param {OgcApiTilesApiGetQueryTilesCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OgcApiTilesApiGenerated
     */
    public getQueryTilesCollection(requestParameters: OgcApiTilesApiGetQueryTilesCollectionRequest, options?: AxiosRequestConfig) {
        return OgcApiTilesApiFp(this.configuration).getQueryTilesCollection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the given data set with OGC API Tiles standard 
     * @summary OGC API Tiles query
     * @param {OgcApiTilesApiGetTilesCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OgcApiTilesApiGenerated
     */
    public getTilesCollection(requestParameters: OgcApiTilesApiGetTilesCollectionRequest, options?: AxiosRequestConfig) {
        return OgcApiTilesApiFp(this.configuration).getTilesCollection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the given data set with OGC API Tiles standard 
     * @summary OGC API Tiles query
     * @param {OgcApiTilesApiQueryCollectionByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OgcApiTilesApiGenerated
     */
    public queryCollectionById(requestParameters: OgcApiTilesApiQueryCollectionByIdRequest, options?: AxiosRequestConfig) {
        return OgcApiTilesApiFp(this.configuration).queryCollectionById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the given data set with OGC API Tiles standard 
     * @summary OGC API Tiles query
     * @param {OgcApiTilesApiQueryCollectionQueryablesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OgcApiTilesApiGenerated
     */
    public queryCollectionQueryables(requestParameters: OgcApiTilesApiQueryCollectionQueryablesRequest, options?: AxiosRequestConfig) {
        return OgcApiTilesApiFp(this.configuration).queryCollectionQueryables(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the given data set with OGC API Tiles standard 
     * @summary OGC API Tiles query
     * @param {OgcApiTilesApiQueryCollectionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OgcApiTilesApiGenerated
     */
    public queryCollections(requestParameters: OgcApiTilesApiQueryCollectionsRequest, options?: AxiosRequestConfig) {
        return OgcApiTilesApiFp(this.configuration).queryCollections(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the given data set with OGC API Tiles standard 
     * @summary OGC API Tiles query
     * @param {OgcApiTilesApiQueryTileMatrixSetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OgcApiTilesApiGenerated
     */
    public queryTileMatrixSets(requestParameters: OgcApiTilesApiQueryTileMatrixSetsRequest, options?: AxiosRequestConfig) {
        return OgcApiTilesApiFp(this.configuration).queryTileMatrixSets(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the given data set with OGC API Tiles standard 
     * @summary OGC API Tiles query
     * @param {OgcApiTilesApiQueryTileMatrixSets0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OgcApiTilesApiGenerated
     */
    public queryTileMatrixSets_1(requestParameters: OgcApiTilesApiQueryTileMatrixSets0Request, options?: AxiosRequestConfig) {
        return OgcApiTilesApiFp(this.configuration).queryTileMatrixSets_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Query the given data set with OGC API Tiles standard 
     * @summary OGC API Tiles query
     * @param {OgcApiTilesApiQueryTilesV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OgcApiTilesApiGenerated
     */
    public queryTilesV1(requestParameters: OgcApiTilesApiQueryTilesV1Request, options?: AxiosRequestConfig) {
        return OgcApiTilesApiFp(this.configuration).queryTilesV1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
